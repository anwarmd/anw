openapi: 3.0.1
info:
  title: Oracle Unity API
  version: 2023.1.0
  description: Customer Intelligence Platform for Real-Time Customer Experience
servers:
  - url: http://dev-mcps.cxunity.ocs.oc-test.com/api-admin
    description: Generated server url
paths:
  /v1/{accesskey}/admin/artifact:
    get:
      operationId: getArtifacts
      description: List of artifacts
      tags:
        - Artifact Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArtifactSummary'
  /v1/{accesskey}/admin/artifact/{artifactName}/{artifactVersion}:
    get:
      operationId: getArtifactInfo
      description: Details of a deployed artifact
      tags:
        - Artifact Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: artifactName
          in: path
          required: true
          schema:
            type: string
        - name: artifactVersion
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactInfo'
  /v1/{accesskey}/admin/artifact/{artifactName}/{artifactVersion}/upload:
    post:
      operationId: uploadArtifact
      description: Upload a new artifact. If an artifact exists for the same name and version, it will be overwritten with the given one.
      tags:
        - Artifact Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: artifactName
          in: path
          required: true
          schema:
            type: string
        - name: artifactVersion
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                artifact:
                  type: object
                artifactProperties:
                  type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAPIReponse'
  /v1/{accesskey}/admin/artifact/{artifactName}/{artifactVersion}/upload/{handle}:
    get:
      operationId: getUploadStatus
      description: Upload status of an artifact
      tags:
        - Artifact Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: artifactName
          in: path
          required: true
          schema:
            type: string
        - name: artifactVersion
          in: path
          required: true
          schema:
            type: string
        - name: handle
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationStatusResponse'
  /v1/{accesskey}/admin/artifact/{artifactName}/{artifactVersion}/remove:
    post:
      operationId: removeArtifact
      description: Remove the given artifact from the tenant hierarchy
      tags:
        - Artifact Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: artifactName
          in: path
          required: true
          schema:
            type: string
        - name: artifactVersion
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAPIReponse'
  /v1/{accesskey}/admin/artifact/{artifactName}/{artifactVersion}/remove/{handle}:
    get:
      operationId: getRemoveStatus
      description: Removal status of the artifact
      tags:
        - Artifact Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: artifactName
          in: path
          required: true
          schema:
            type: string
        - name: artifactVersion
          in: path
          required: true
          schema:
            type: string
        - name: handle
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationStatusResponse'
  /v1/{accesskey}/admin/job/{jobType}/{jobId}/start/{handle}:
    get:
      operationId: getStartStatus
      description: Status of a job start
      tags:
        - Job Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: jobType
          in: path
          required: true
          schema:
            type: string
            enum:
              - EXPORT
              - INGEST
              - DW
              - PUBLISH
              - ANALYTICS
              - QUERYEXPORT
              - SOURCESCHEMADETECT
              - CAMPAIGN
              - IDGRAPH
        - name: jobId
          in: path
          required: true
          schema:
            type: string
        - name: handle
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationStatusResponse'
  /v1/{accesskey}/admin/job/{jobType}/{jobId}/stop:
    post:
      operationId: stopJob
      description: Stop a job
      tags:
        - Job Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: jobType
          in: path
          required: true
          schema:
            type: string
            enum:
              - EXPORT
              - INGEST
              - DW
              - PUBLISH
              - ANALYTICS
              - QUERYEXPORT
              - SOURCESCHEMADETECT
              - CAMPAIGN
              - IDGRAPH
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAPIReponse'
  /v1/{accesskey}/admin/job/{jobType}/{jobId}/stop/{handle}:
    get:
      operationId: getStopStatus
      description: Status of job stop submission
      tags:
        - Job Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: jobType
          in: path
          required: true
          schema:
            type: string
            enum:
              - EXPORT
              - INGEST
              - DW
              - PUBLISH
              - ANALYTICS
              - QUERYEXPORT
              - SOURCESCHEMADETECT
              - CAMPAIGN
              - IDGRAPH
        - name: jobId
          in: path
          required: true
          schema:
            type: string
        - name: handle
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationStatusResponse'
  /v1/{accesskey}/admin/job/{jobType}/{jobId}/schedule:
    post:
      operationId: scheduleJob
      description: Schedule a Job
      tags:
        - Job Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: jobType
          in: path
          required: true
          schema:
            type: string
            enum:
              - EXPORT
              - INGEST
              - DW
              - PUBLISH
              - ANALYTICS
              - QUERYEXPORT
              - SOURCESCHEMADETECT
              - CAMPAIGN
              - IDGRAPH
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAPIReponse'
  /v1/{accesskey}/admin/job/{jobType}/{jobId}/schedule/{handle}:
    get:
      operationId: getScheduleStatus
      description: Status of a job schedule submission
      tags:
        - Job Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: jobType
          in: path
          required: true
          schema:
            type: string
            enum:
              - EXPORT
              - INGEST
              - DW
              - PUBLISH
              - ANALYTICS
              - QUERYEXPORT
              - SOURCESCHEMADETECT
              - CAMPAIGN
              - IDGRAPH
        - name: jobId
          in: path
          required: true
          schema:
            type: string
        - name: handle
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationStatusResponse'
  /v1/{accesskey}/admin/job/{jobType}/{jobId}/unschedule:
    post:
      operationId: unscheduleJob
      description: Unschedule a job
      tags:
        - Job Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: jobType
          in: path
          required: true
          schema:
            type: string
            enum:
              - EXPORT
              - INGEST
              - DW
              - PUBLISH
              - ANALYTICS
              - QUERYEXPORT
              - SOURCESCHEMADETECT
              - CAMPAIGN
              - IDGRAPH
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAPIReponse'
  /v1/{accesskey}/admin/job/{jobType}/{jobId}/unschedule/{handle}:
    get:
      operationId: getUnscheduleStatus
      description: Status of a job unschedule submission
      tags:
        - Job Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: jobType
          in: path
          required: true
          schema:
            type: string
            enum:
              - EXPORT
              - INGEST
              - DW
              - PUBLISH
              - ANALYTICS
              - QUERYEXPORT
              - SOURCESCHEMADETECT
              - CAMPAIGN
              - IDGRAPH
        - name: jobId
          in: path
          required: true
          schema:
            type: string
        - name: handle
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationStatusResponse'
  /v1/{accesskey}/admin/job/{jobType}/{jobId}/status:
    get:
      operationId: getJobStatus
      description: Current status of a Job
      tags:
        - Job Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: jobType
          in: path
          required: true
          schema:
            type: string
            enum:
              - EXPORT
              - INGEST
              - DW
              - PUBLISH
              - ANALYTICS
              - QUERYEXPORT
              - SOURCESCHEMADETECT
              - CAMPAIGN
              - IDGRAPH
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /v1/{accesskey}/admin/job/{jobType}/{jobId}/runs:
    get:
      operationId: getJobRuns
      description: List of job run records
      tags:
        - Job Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: jobType
          in: path
          required: true
          schema:
            type: string
            enum:
              - EXPORT
              - INGEST
              - DW
              - PUBLISH
              - ANALYTICS
              - QUERYEXPORT
              - SOURCESCHEMADETECT
              - CAMPAIGN
              - IDGRAPH
        - name: jobId
          in: path
          required: true
          schema:
            type: string
        - name: startTs
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - name: endTs
          in: query
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 10
        - name: auditLimit
          in: query
          schema:
            type: integer
            format: int32
            default: 30
        - name: expand
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RunRecord'
  /v1/{accesskey}/admin/job/{jobType}/{jobId}/runs/{runId}:
    get:
      operationId: getJobRunsForRunId
      description: List of job run records for the given runId and version timestamp
      tags:
        - Job Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: jobType
          in: path
          required: true
          schema:
            type: string
            enum:
              - EXPORT
              - INGEST
              - DW
              - PUBLISH
              - ANALYTICS
              - QUERYEXPORT
              - SOURCESCHEMADETECT
              - CAMPAIGN
              - IDGRAPH
        - name: jobId
          in: path
          required: true
          schema:
            type: string
        - name: runId
          in: path
          required: true
          schema:
            type: string
        - name: versionTS
          in: query
          schema:
            type: integer
            format: int64
        - name: auditLimit
          in: query
          schema:
            type: integer
            format: int32
            default: 30
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RunRecord'
  /v1/{accesskey}/admin/job/{jobType}/{jobId}/runs/{runId}/errors:
    get:
      operationId: getJobErrors
      description: List of job run errors
      tags:
        - Job Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: jobType
          in: path
          required: true
          schema:
            type: string
            enum:
              - EXPORT
              - INGEST
              - DW
              - PUBLISH
              - ANALYTICS
              - QUERYEXPORT
              - SOURCESCHEMADETECT
              - CAMPAIGN
              - IDGRAPH
        - name: jobId
          in: path
          required: true
          schema:
            type: string
        - name: runId
          in: path
          required: true
          schema:
            type: string
        - name: versionTS
          in: query
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobError'
  /v1/{accesskey}/admin/job/{jobType}/{jobId}/nextRuntimes:
    get:
      operationId: getJobNextRuntimes
      description: Get the job next runtimes, if job is scheduled
      tags:
        - Job Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: jobType
          in: path
          required: true
          schema:
            type: string
            enum:
              - EXPORT
              - INGEST
              - DW
              - PUBLISH
              - ANALYTICS
              - QUERYEXPORT
              - SOURCESCHEMADETECT
              - CAMPAIGN
              - IDGRAPH
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: integer
                    format: int64
  /v1/{accesskey}/admin/job/{jobType}/{jobId}/start:
    post:
      operationId: startJob
      description: Start a job
      tags:
        - Job Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: jobType
          in: path
          required: true
          schema:
            type: string
            enum:
              - EXPORT
              - INGEST
              - DW
              - PUBLISH
              - ANALYTICS
              - QUERYEXPORT
              - SOURCESCHEMADETECT
              - CAMPAIGN
              - IDGRAPH
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAPIReponse'
  /v1/{accesskey}/admin/jobsummaries:
    get:
      operationId: getJobSummary
      description: Job Summary
      tags:
        - Job Summary Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: startTs
          in: query
          schema:
            type: integer
            format: int64
        - name: endTs
          in: query
          schema:
            type: integer
            format: int64
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobSummary'
  /v1/{accesskey}/admin/sourceschemas/{handle}:
    get:
      operationId: getSourceDetectStatus
      description: Status of a source detect handle
      tags:
        - Source Detect Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: handle
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceDetectResponse'
  /v1/{accesskey}/admin/sourceschemas/handles:
    get:
      operationId: getHandles
      description: Fetches list of handles ordered by time
      tags:
        - Source Detect Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceDetectStatusReponse'
  /v1/{accesskey}/admin/sourceschemas:
    post:
      operationId: detectSourceSchema
      description: Initiates a source schema detect run
      tags:
        - Source Detect Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceDetectCall'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceDetectStatusReponse'
  /v1/{accesskey}/admin/tenant/provision:
    post:
      operationId: provisionTenant
      description: If truncateDW is true then drops if exists and re-creates all datasets and DW tables. If truncateCube is true then drops all the available cubes from kylin for this tenant
      tags:
        - Tenant Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantProvisionCall'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAPIReponse'
  /v1/{accesskey}/admin/tenant/publish:
    post:
      operationId: publishTenant
      description: Publish job for a tenant
      tags:
        - Tenant Admin API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantPublishCall'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /v1/{accesskey}/admin/version:
    get:
      operationId: getVersion
      description: Version from the manifest file
      tags:
        - Manifest API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /v1/{accesskey}/data/query/execute:
    post:
      operationId: getQueryResult
      description: Executes query and return results
      tags:
        - Data API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: limit
          description: Number of records to return. Max is 1K
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MCPSQuery'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult'
  /v1/{accesskey}/data/query/executeid:
    post:
      operationId: getQueryResult_1
      description: Executes query for the unique id and return results
      tags:
        - Data API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: limit
          description: Number of records to return. Max is 1K
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MCPSQueryIdRequest'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult'
  /v1/{accesskey}/data/query/countid:
    post:
      operationId: getQueryResultWithCount
      description: Number of rows in the query result for the given unique id
      tags:
        - Data API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: refresh
          description: A value of true bypasses the cache and fetches the most up to date count at the cost of performance
          in: query
          schema:
            type: boolean
            default: false
        - name: timeoutMs
          description: The amount of time the server waits in milliseconds for the query results before returning back to the caller
          in: query
          schema:
            type: integer
            format: int64
            default: 30000
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MCPSQueryIdRequest'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/data/query/count:
    post:
      operationId: getQueryResultWithCount_1
      description: Number of rows in the query result
      tags:
        - Data API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: refresh
          description: A value of true bypasses the cache and fetches the most up to date count at the cost of performance
          in: query
          schema:
            type: boolean
            default: false
        - name: timeoutMs
          description: The amount of time the server waits in milliseconds for the query results before returning back to the caller
          in: query
          schema:
            type: integer
            format: int64
            default: 30000
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MCPSQuery'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/data/query/persist:
    post:
      operationId: persistQuery
      description: Persists query using unique id for retrieval later
      tags:
        - Data API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MCPSQueryIdRequest'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResults'
  /v1/{accesskey}/data/density/entities/{tableName}:
    get:
      operationId: getTableDensity
      description: Return statistics for a single table
      tags:
        - Data Density API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: tableName
          description: Table name owned by tenant
          example: customer
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableStatistics'
  /v1/{accesskey}/data/lookup:
    get:
      operationId: lookup
      description: Create a lookup
      tags:
        - Data Lookup API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: tableId
          in: query
          required: true
          schema:
            type: string
        - name: fieldId
          in: query
          required: true
          schema:
            type: string
        - name: filter
          description: The prefix to filter the list of values on
          in: query
          schema:
            type: string
        - name: offset
          description: Result set offset. Used for paging
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          description: Result set limit. Used for paging. The Max limit is 500
          in: query
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /v1/{accesskey}/data/idgraph/{ruleid}:
    get:
      operationId: search
      description: Search API for ID graph
      tags:
        - Id Graph API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: ruleid
          description: Rule Id
          in: path
          required: true
          schema:
            type: string
        - name: q
          description: Search criteria
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: limit
          description: Result set limit
          in: query
          schema:
            type: integer
            format: int32
            default: 10
        - name: offset
          description: Result set offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdGraphQueryResult'
  /v1/{accesskey}/data/idgraph/{ruleid}/{recordid}:
    get:
      operationId: fetchSubRuleData
      description: Fetches data from subrules
      tags:
        - Id Graph API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: ruleid
          description: Rule id
          in: path
          required: true
          schema:
            type: string
        - name: recordid
          description: Record id
          in: path
          required: true
          schema:
            type: string
        - name: expand
          description: Expand parameter for subrules
          in: query
          schema:
            type: string
            default: all
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/QueryResult'
  /v1/{accesskey}/metadata/aggregatedtables/{aggregatedTableId}/aggregatedattributes:
    get:
      operationId: readAll
      description: Retrieves all Aggregated Attributes for the tenant
      tags:
        - Aggregated Attribute API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
  /v1/{accesskey}/metadata/aggregatedtables/{aggregatedTableId}/aggregatedattributes/diff:
    get:
      operationId: diffAll
      tags:
        - Aggregated Attribute API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/aggregatedtables/{aggregatedTableId}/aggregatedattributes/{aggregatedAttributeId}:
    get:
      operationId: readSingle
      description: Retrieves an Aggregated Attribute by ID
      tags:
        - Aggregated Attribute API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedAttributeId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: update
      description: Updates an Aggregated Attribute for the tenant with form data
      tags:
        - Aggregated Attribute API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedAttributeId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: delete
      description: Deletes an AggregatedAttribute from Aggregated Table
      tags:
        - Aggregated Attribute API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedAttributeId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/aggregatedtables/{aggregatedTableId}/aggregatedattributes/{aggregatedAttributeId}/diff:
    get:
      operationId: diffSingle
      tags:
        - Aggregated Attribute API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedAttributeId
          in: path
          required: true
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/aggregatedtables:
    get:
      operationId: readAll_1
      description: Retrieves all Aggregated Tables for the tenant
      tags:
        - Aggregated Table API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    post:
      operationId: create
      description: Create a new Aggregated Table
      tags:
        - Aggregated Table API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AggregatedTable'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/aggregatedtables/diff:
    get:
      operationId: diffAll_1
      tags:
        - Aggregated Table API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/aggregatedtables/{aggregatedTableId}:
    get:
      operationId: read
      description: Retrieves an Aggregated Table by ID
      tags:
        - Aggregated Table API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_1
      description: Updates an Aggregated Table and sub-entities for the tenant with form data
      tags:
        - Aggregated Table API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_1
      description: Deletes an Aggregated Table and its sub-entities
      tags:
        - Aggregated Table API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/aggregatedtables/{aggregatedTableId}/diff:
    get:
      operationId: diff
      tags:
        - Aggregated Table API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/aggregatedtables/{aggregatedTableId}/{subkey}:
    get:
      operationId: readSingle_1
      tags:
        - Aggregated Table API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle
      tags:
        - Aggregated Table API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle
      tags:
        - Aggregated Table API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/aggregatedtables/{aggregatedTableId}/{subkey}/diff:
    get:
      operationId: diffSingle_1
      tags:
        - Aggregated Table API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/analyticssources:
    get:
      operationId: getAnalyticsSources
      description: Utility class to fetch the list of Analytics sources
      tags:
        - Analytics Source API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnalyticsSource'
  /v1/{accesskey}/metadata/attributegroups:
    get:
      operationId: readAll_2
      tags:
        - Attribute Group API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    post:
      operationId: create_1
      tags:
        - Attribute Group API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeGroup'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/attributegroups/diff:
    get:
      operationId: diffAll_2
      tags:
        - Attribute Group API
      parameters:
        - name: X-RESOURCE-SERVICE-INSTANCE-IDENTITY-APPNAME
          in: header
          required: false
          example: MCPS_TEST_TENANT
          schema:
            type: string
        - name: IDCS_USER_ID
          in: header
          required: false
          example: MCPS_TEST_ADMIN_USER
          schema:
            type: string
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/attributegroups/{primarykey}:
    get:
      operationId: read_1
      tags:
        - Attribute Group API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_3
      tags:
        - Attribute Group API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_3
      tags:
        - Attribute Group API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/attributegroups/{primarykey}/diff:
    get:
      operationId: diff_1
      tags:
        - Attribute Group API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/attributegroups/{primarykey}/{subkey}:
    get:
      operationId: readSingle_2
      tags:
        - Attribute Group API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_2
      tags:
        - Attribute Group API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_2
      tags:
        - Attribute Group API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/attributegroups/{primarykey}/{subkey}/diff:
    get:
      operationId: diffSingle_2
      tags:
        - Attribute Group API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/aggregatedtables/{aggregatedTableId}/buckets:
    get:
      operationId: readAll_3
      description: Retrieves all Buckets for the tenant
      tags:
        - Bucketing API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
  /v1/{accesskey}/metadata/aggregatedtables/{aggregatedTableId}/buckets/diff:
    get:
      operationId: diffAll_3
      tags:
        - Bucketing API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/aggregatedtables/{aggregatedTableId}/buckets/{bucketId}:
    get:
      operationId: readSingle_3
      description: Retrieves a Bucket by ID
      tags:
        - Bucketing API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: bucketId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: update_1
      description: Updates a Bucket for the tenant with form data
      tags:
        - Bucketing API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: bucketId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: delete_1
      description: Deletes a Bucket and its configuration from the Aggregated Table
      tags:
        - Bucketing API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: bucketId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/aggregatedtables/{aggregatedTableId}/buckets/{bucketId}/diff:
    get:
      operationId: diffSingle_3
      tags:
        - Bucketing API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: bucketId
          in: path
          required: true
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/clusters:
    get:
      operationId: readAll_4
      description: Retrieves all clusters for the tenant
      tags:
        - Clustering API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    post:
      operationId: create_2
      description: Creates a new cluster
      tags:
        - Clustering API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clustering'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/clusters/diff:
    get:
      operationId: diffAll_4
      tags:
        - Clustering API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/clusters/{clusteringId}:
    get:
      operationId: read_2
      description: Retrieves cluster by ID
      tags:
        - Clustering API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: clusteringId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_5
      description: Updates a cluster for the tenant with form data
      tags:
        - Clustering API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: clusteringId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_5
      description: Deletes a cluster
      tags:
        - Clustering API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: clusteringId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/clusters/{clusteringId}/diff:
    get:
      operationId: diff_2
      tags:
        - Clustering API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: clusteringId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/clusters/{clusteringId}/{subkey}:
    get:
      operationId: readSingle_4
      tags:
        - Clustering API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: clusteringId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_4
      tags:
        - Clustering API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: clusteringId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_4
      tags:
        - Clustering API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: clusteringId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/clusters/{clusteringId}/{subkey}/diff:
    get:
      operationId: diffSingle_4
      tags:
        - Clustering API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: clusteringId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/clusters/{clusteringId}/clusteringrules:
    get:
      operationId: readAll_5
      description: Finds all clustering and matching rules for the tenant
      tags:
        - Clustering Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: clusteringId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
  /v1/{accesskey}/metadata/clusters/{clusteringId}/clusteringrules/diff:
    get:
      operationId: diffAll_5
      tags:
        - Clustering Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: clusteringId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/clusters/{clusteringId}/clusteringrules/{clusteringRuleId}:
    get:
      operationId: readSingle_5
      description: Retrieves cluster by ID
      tags:
        - Clustering Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: clusteringId
          in: path
          required: true
          schema:
            type: string
        - name: clusteringRuleId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: update_2
      description: Updates a clustering rule with form data
      tags:
        - Clustering Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: clusteringId
          in: path
          required: true
          schema:
            type: string
        - name: clusteringRuleId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: delete_2
      description: Deletes a clustering rule
      tags:
        - Clustering Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: clusteringId
          in: path
          required: true
          schema:
            type: string
        - name: clusteringRuleId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/clusters/{clusteringId}/clusteringrules/{clusteringRuleId}/diff:
    get:
      operationId: diffSingle_5
      tags:
        - Clustering Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: clusteringId
          in: path
          required: true
          schema:
            type: string
        - name: clusteringRuleId
          in: path
          required: true
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/tables/{tableId}/columns:
    get:
      operationId: readAll_6
      description: Returns all columns for the table
      tags:
        - Column API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
  /v1/{accesskey}/metadata/tables/{tableId}/columns/diff:
    get:
      operationId: diffAll_6
      tags:
        - Column API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/tables/{tableId}/columns/{fieldId}:
    get:
      operationId: readSingle_6
      description: Returns the column definitions
      tags:
        - Column API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          required: true
          schema:
            type: string
        - name: fieldId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: update_3
      description: Add/update column definition in existing table in metadata
      tags:
        - Column API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          required: true
          schema:
            type: string
        - name: fieldId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: delete_3
      tags:
        - Column API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          required: true
          schema:
            type: string
        - name: fieldId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/tables/{tableId}/columns/{fieldId}/diff:
    get:
      operationId: diffSingle_6
      tags:
        - Column API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          required: true
          schema:
            type: string
        - name: fieldId
          in: path
          required: true
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/models/{modelId}/cubes:
    get:
      operationId: readAll_7
      description: Retrieves all cubes for the given model ID of a tenant
      tags:
        - Cube API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
  /v1/{accesskey}/metadata/models/{modelId}/cubes/diff:
    get:
      operationId: diffAll_7
      tags:
        - Cube API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/models/{modelId}/cubes/{cubeId}:
    get:
      operationId: readSingle_7
      description: Retrieves a cube by ID
      tags:
        - Cube API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          schema:
            type: string
        - name: cubeId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: update_4
      description: Updates a cube for the tenant with form data
      tags:
        - Cube API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          schema:
            type: string
        - name: cubeId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: delete_4
      description: Deletes a cube
      tags:
        - Cube API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          schema:
            type: string
        - name: cubeId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/models/{modelId}/cubes/{cubeId}/diff:
    get:
      operationId: diffSingle_7
      tags:
        - Cube API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          schema:
            type: string
        - name: cubeId
          in: path
          required: true
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/dwmappingscripts:
    get:
      operationId: readAll_8
      description: Retrieves all DW Mapping scripts within the account
      tags:
        - DW Mapping Script API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    post:
      operationId: create_3
      description: Creates a new DW Mapping script
      tags:
        - DW Mapping Script API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DWMappingScript'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/dwmappingscripts/diff:
    get:
      operationId: diffAll_8
      tags:
        - DW Mapping Script API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/dwmappingscripts/{scriptId}:
    get:
      operationId: read_3
      tags:
        - DW Mapping Script API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: scriptId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_7
      description: Updates an existing DW Mapping script
      tags:
        - DW Mapping Script API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: scriptId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_7
      description: Deletes a DW Mapping script
      tags:
        - DW Mapping Script API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: scriptId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/dwmappingscripts/{scriptId}/diff:
    get:
      operationId: diff_3
      tags:
        - DW Mapping Script API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: scriptId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/dwmappingscripts/{scriptId}/{subkey}:
    get:
      operationId: readSingle_8
      tags:
        - DW Mapping Script API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: scriptId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_6
      tags:
        - DW Mapping Script API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: scriptId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_6
      tags:
        - DW Mapping Script API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: scriptId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/dwmappingscripts/{scriptId}/{subkey}/diff:
    get:
      operationId: diffSingle_8
      tags:
        - DW Mapping Script API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: scriptId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/datasourceviews:
    get:
      operationId: readAll_9
      description: Retrieves all data source views for the tenant
      tags:
        - Data Source View API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    post:
      operationId: create_4
      description: Creates a new data source view
      tags:
        - Data Source View API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSourceView'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/datasourceviews/diff:
    get:
      operationId: diffAll_9
      tags:
        - Data Source View API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/datasourceviews/{primarykey}:
    get:
      operationId: read_4
      description: Retrieves data source view by ID
      tags:
        - Data Source View API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_9
      description: Updates a data source view for the tenant with form data
      tags:
        - Data Source View API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_9
      description: Deletes a data source view
      tags:
        - Data Source View API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/datasourceviews/{primarykey}/diff:
    get:
      operationId: diff_4
      tags:
        - Data Source View API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/datasourceviews/{primarykey}/{subkey}:
    get:
      operationId: readSingle_9
      tags:
        - Data Source View API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_8
      tags:
        - Data Source View API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_8
      tags:
        - Data Source View API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/datasourceviews/{primarykey}/{subkey}/diff:
    get:
      operationId: diffSingle_9
      tags:
        - Data Source View API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/tables/{tableId}/foreignkeys:
    get:
      operationId: readAll_14
      description: Returns all foreign keys definitions in the table
      tags:
        - Foreign Key API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
  /v1/{accesskey}/metadata/tables/{tableId}/foreignkeys/diff:
    get:
      operationId: diffAll_14
      tags:
        - Foreign Key API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/tables/{tableId}/foreignkeys/{foreignKeyId}:
    get:
      operationId: readSingle_14
      description: Returns the foreign key definition in the table
      tags:
        - Foreign Key API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          required: true
          schema:
            type: string
        - name: foreignKeyId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: update_5
      tags:
        - Foreign Key API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          required: true
          schema:
            type: string
        - name: foreignKeyId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: delete_5
      tags:
        - Foreign Key API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          required: true
          schema:
            type: string
        - name: foreignKeyId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/tables/{tableId}/foreignkeys/{foreignKeyId}/diff:
    get:
      operationId: diffSingle_14
      tags:
        - Foreign Key API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          required: true
          schema:
            type: string
        - name: foreignKeyId
          in: path
          required: true
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/idgraphrules:
    get:
      operationId: readAll_15
      tags:
        - ID Graph Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    post:
      operationId: create_9
      tags:
        - ID Graph Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDGraphRule'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/idgraphrules/diff:
    get:
      operationId: diffAll_15
      tags:
        - ID Graph Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/idgraphrules/{ruleId}:
    get:
      operationId: read_9
      tags:
        - ID Graph Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_19
      tags:
        - ID Graph Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_19
      tags:
        - ID Graph Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/idgraphrules/{ruleId}/diff:
    get:
      operationId: diff_9
      tags:
        - ID Graph Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/idgraphrules/{ruleId}/{subkey}:
    get:
      operationId: readSingle_15
      tags:
        - ID Graph Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_18
      tags:
        - ID Graph Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_18
      tags:
        - ID Graph Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/idgraphrules/{ruleId}/{subkey}/diff:
    get:
      operationId: diffSingle_15
      tags:
        - ID Graph Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/idgraphrules/{ruleId}/subrules:
    get:
      operationId: readAll_16
      tags:
        - ID Graph Sub Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
  /v1/{accesskey}/metadata/idgraphrules/{ruleId}/subrules/diff:
    get:
      operationId: diffAll_16
      tags:
        - ID Graph Sub Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/idgraphrules/{ruleId}/subrules/{subruleId}:
    get:
      operationId: readSingle_16
      tags:
        - ID Graph Sub Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
        - name: subruleId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: update_6
      tags:
        - ID Graph Sub Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
        - name: subruleId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: delete_6
      tags:
        - ID Graph Sub Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
        - name: subruleId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/idgraphrules/{ruleId}/subrules/{subruleId}/diff:
    get:
      operationId: diffSingle_16
      tags:
        - ID Graph Sub Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
        - name: subruleId
          in: path
          required: true
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/jobs:
    get:
      operationId: readAll_19
      tags:
        - Job API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    post:
      operationId: create_12
      tags:
        - Job API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/jobs/diff:
    get:
      operationId: diffAll_19
      tags:
        - Job API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/jobs/{jobType}:
    get:
      operationId: read_12
      tags:
        - Job API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: jobType
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_25
      tags:
        - Job API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: jobType
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_25
      tags:
        - Job API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: jobType
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/jobs/{jobType}/diff:
    get:
      operationId: diff_12
      tags:
        - Job API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: jobType
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/jobs/{jobType}/{jobId}:
    get:
      operationId: readSingle_19
      tags:
        - Job API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: jobType
          in: path
          required: true
          schema:
            type: string
        - name: jobId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_24
      tags:
        - Job API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: jobType
          in: path
          required: true
          schema:
            type: string
        - name: jobId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_24
      tags:
        - Job API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: jobType
          in: path
          required: true
          schema:
            type: string
        - name: jobId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/jobs/{jobType}/{jobId}/diff:
    get:
      operationId: diffSingle_19
      tags:
        - Job API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: jobType
          in: path
          required: true
          schema:
            type: string
        - name: jobId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/lookups:
    get:
      operationId: readAll_20
      tags:
        - Lookup API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    post:
      operationId: create_13
      tags:
        - Lookup API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lookup'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/lookups/diff:
    get:
      operationId: diffAll_20
      tags:
        - Lookup API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/lookups/{primarykey}:
    get:
      operationId: read_13
      tags:
        - Lookup API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_27
      tags:
        - Lookup API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_27
      tags:
        - Lookup API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/lookups/{primarykey}/diff:
    get:
      operationId: diff_13
      tags:
        - Lookup API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/lookups/{primarykey}/{subkey}:
    get:
      operationId: readSingle_20
      tags:
        - Lookup API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_26
      tags:
        - Lookup API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_26
      tags:
        - Lookup API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/lookups/{primarykey}/{subkey}/diff:
    get:
      operationId: diffSingle_20
      tags:
        - Lookup API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/mcpsqueries:
    get:
      operationId: readAll_21
      description: Returns list of MCPSQuery objects in metadata
      tags:
        - MCPSQuery API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    post:
      operationId: create_14
      description: Creates MCPSQuery object
      tags:
        - MCPSQuery API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MCPSQuery'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/mcpsqueries/diff:
    get:
      operationId: diffAll_21
      tags:
        - MCPSQuery API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/mcpsqueries/{primarykey}:
    get:
      operationId: read_14
      tags:
        - MCPSQuery API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_29
      tags:
        - MCPSQuery API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_29
      tags:
        - MCPSQuery API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/mcpsqueries/{primarykey}/diff:
    get:
      operationId: diff_14
      tags:
        - MCPSQuery API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/mcpsqueries/{primarykey}/{subkey}:
    get:
      operationId: readSingle_21
      tags:
        - MCPSQuery API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_28
      tags:
        - MCPSQuery API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_28
      tags:
        - MCPSQuery API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/mcpsqueries/{primarykey}/{subkey}/diff:
    get:
      operationId: diffSingle_21
      tags:
        - MCPSQuery API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/models:
    get:
      operationId: readAll_22
      description: Retrieves all models for the tenant
      tags:
        - Model API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    post:
      operationId: create_15
      description: Creates a new model
      tags:
        - Model API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/models/diff:
    get:
      operationId: diffAll_22
      tags:
        - Model API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/models/{modelId}:
    get:
      operationId: read_15
      description: Retrieves a model by ID
      tags:
        - Model API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_31
      description: Updates a model for the tenant with form data
      tags:
        - Model API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_31
      description: Deletes a model
      tags:
        - Model API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/models/{modelId}/diff:
    get:
      operationId: diff_15
      tags:
        - Model API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/models/{modelId}/{subkey}:
    get:
      operationId: readSingle_22
      tags:
        - Model API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_30
      tags:
        - Model API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_30
      tags:
        - Model API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/models/{modelId}/{subkey}/diff:
    get:
      operationId: diffSingle_22
      tags:
        - Model API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/notifications:
    get:
      operationId: readAll_23
      tags:
        - Notification API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    post:
      operationId: create_16
      tags:
        - Notification API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/notifications/diff:
    get:
      operationId: diffAll_23
      tags:
        - Notification API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/notifications/{primarykey}:
    get:
      operationId: read_16
      tags:
        - Notification API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_33
      tags:
        - Notification API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_33
      tags:
        - Notification API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/notifications/{primarykey}/diff:
    get:
      operationId: diff_16
      tags:
        - Notification API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/notifications/{primarykey}/{subkey}:
    get:
      operationId: readSingle_23
      tags:
        - Notification API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_32
      tags:
        - Notification API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_32
      tags:
        - Notification API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/notifications/{primarykey}/{subkey}/diff:
    get:
      operationId: diffSingle_23
      tags:
        - Notification API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/objectsets:
    get:
      operationId: readAll_24
      tags:
        - Object Set API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    post:
      operationId: create_17
      tags:
        - Object Set API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectSet'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/objectsets/diff:
    get:
      operationId: diffAll_24
      tags:
        - Object Set API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/objectsets/{primarykey}:
    get:
      operationId: read_17
      tags:
        - Object Set API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_35
      tags:
        - Object Set API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_35
      tags:
        - Object Set API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/objectsets/{primarykey}/diff:
    get:
      operationId: diff_17
      tags:
        - Object Set API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/objectsets/{primarykey}/{subkey}:
    get:
      operationId: readSingle_24
      tags:
        - Object Set API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_34
      tags:
        - Object Set API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_34
      tags:
        - Object Set API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/objectsets/{primarykey}/{subkey}/diff:
    get:
      operationId: diffSingle_24
      tags:
        - Object Set API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/aggregatedtables/{aggregatedTableId}/promotionrules:
    get:
      operationId: readAll_26
      description: Retrieves all Promotion Rules for the tenant
      tags:
        - Promotion Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
  /v1/{accesskey}/metadata/aggregatedtables/{aggregatedTableId}/promotionrules/diff:
    get:
      operationId: diffAll_26
      tags:
        - Promotion Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/aggregatedtables/{aggregatedTableId}/promotionrules/{promotionRuleId}:
    get:
      operationId: readSingle_26
      description: Retrieves a Promotion Rule by ID
      tags:
        - Promotion Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: promotionRuleId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: update_7
      description: Updates a Promotion Rule for the tenant with form data
      tags:
        - Promotion Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: promotionRuleId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: delete_7
      description: Deletes a Promotion Rule and its Configs from Aggregated Table
      tags:
        - Promotion Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: promotionRuleId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/aggregatedtables/{aggregatedTableId}/promotionrules/{promotionRuleId}/diff:
    get:
      operationId: diffSingle_26
      tags:
        - Promotion Rule API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: aggregatedTableId
          in: path
          required: true
          schema:
            type: string
        - name: promotionRuleId
          in: path
          required: true
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/sinkinstances:
    get:
      operationId: readAll_29
      description: Return list of sink metadata
      tags:
        - Sink Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    post:
      operationId: create_21
      description: Creates a sink instance
      tags:
        - Sink Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SinkInstance'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/sinkinstances/diff:
    get:
      operationId: diffAll_29
      tags:
        - Sink Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/sinkinstances/{sinkId}:
    get:
      operationId: read_21
      tags:
        - Sink Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: sinkId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_43
      description: Update existing sink metadata
      tags:
        - Sink Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: sinkId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_43
      tags:
        - Sink Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: sinkId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/sinkinstances/{sinkId}/diff:
    get:
      operationId: diff_21
      tags:
        - Sink Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: sinkId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/sinkinstances/{sinkId}/{subkey}:
    get:
      operationId: readSingle_29
      tags:
        - Sink Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: sinkId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_42
      tags:
        - Sink Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: sinkId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_42
      tags:
        - Sink Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: sinkId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/sinkinstances/{sinkId}/{subkey}/diff:
    get:
      operationId: diffSingle_29
      tags:
        - Sink Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: sinkId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/sourceinstances:
    get:
      operationId: readAll_31
      description: Return list of sources metadata
      tags:
        - Source Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    post:
      operationId: create_23
      description: Creates a source instance
      tags:
        - Source Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceInstance'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/sourceinstances/diff:
    get:
      operationId: diffAll_31
      tags:
        - Source Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/sourceinstances/{sourceId}:
    get:
      operationId: read_23
      tags:
        - Source Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: sourceId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_47
      description: Update existing source metadata
      tags:
        - Source Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: sourceId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_47
      tags:
        - Source Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: sourceId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/sourceinstances/{sourceId}/diff:
    get:
      operationId: diff_23
      tags:
        - Source Instance API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: sourceId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/sourceinstances/{sourceId}/{subkey}:
    get:
      operationId: readSingle_31
      tags:
        - Source Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: sourceId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_46
      tags:
        - Source Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: sourceId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_46
      tags:
        - Source Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: sourceId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/sourceinstances/{sourceId}/{subkey}/diff:
    get:
      operationId: diffSingle_31
      tags:
        - Source Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: sourceId
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/tables:
    get:
      operationId: readAll_32
      description: Returns all tables for the tenant
      tags:
        - Table API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    post:
      operationId: create_24
      description: Creates a new table in metadata
      tags:
        - Table API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Table'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/tables/diff:
    get:
      operationId: diffAll_32
      tags:
        - Table API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/tables/{tableId}:
    get:
      operationId: read_24
      description: Returns details for the table
      tags:
        - Table API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_49
      tags:
        - Table API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_49
      tags:
        - Table API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/tables/{tableId}/diff:
    get:
      operationId: diff_24
      tags:
        - Table API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/tables/{tableId}/{fieldId}:
    get:
      operationId: readSingle_32
      description: Returns the column definitions for the table
      tags:
        - Table API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          required: true
          schema:
            type: string
        - name: fieldId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_48
      description: Add/update column definition in existing table in metadata
      tags:
        - Table API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          required: true
          schema:
            type: string
        - name: fieldId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_48
      tags:
        - Table API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          required: true
          schema:
            type: string
        - name: fieldId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/tables/{tableId}/{fieldId}/diff:
    get:
      operationId: diffSingle_32
      tags:
        - Table API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          required: true
          schema:
            type: string
        - name: fieldId
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/transforminstances:
    get:
      operationId: readAll_34
      tags:
        - Transform Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    post:
      operationId: create_26
      tags:
        - Transform Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransformInstance'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/transforminstances/diff:
    get:
      operationId: diffAll_34
      tags:
        - Transform Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/transforminstances/{primarykey}:
    get:
      operationId: read_26
      tags:
        - Transform Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_53
      tags:
        - Transform Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_53
      tags:
        - Transform Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/transforminstances/{primarykey}/diff:
    get:
      operationId: diff_26
      tags:
        - Transform Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: expand
          in: query
          schema:
            type: string
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/metadata/transforminstances/{primarykey}/{subkey}:
    get:
      operationId: readSingle_34
      tags:
        - Transform Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseDTO'
    put:
      operationId: updateSingle_52
      tags:
        - Transform Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseDTO'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseDTO'
    delete:
      operationId: deleteSingle_52
      tags:
        - Transform Instance API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1/{accesskey}/metadata/transforminstances/{primarykey}/{subkey}/diff:
    get:
      operationId: diffSingle_34
      tags:
        - Transform Instance API
      parameters:
        - name: accesskey
          in: path
          required: true
          schema:
            type: string
        - name: primarykey
          in: path
          required: true
          schema:
            type: string
        - name: subkey
          in: path
          required: true
          schema:
            type: string
        - name: before
          in: query
          schema:
            type: string
            format: date-time
        - name: target
          in: query
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          schema:
            $ref: '#/components/schemas/FilterCriteria'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /v1/{accesskey}/data/entities:
    post:
      operationId: ingestRecords
      description: API for ingesting data
      tags:
        - Data Ingest API
      parameters:
        - name: accesskey
          description: Access key for the tenant
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: List of entity records
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: object
      responses:
        default:
          description: default response - Result of records ingested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestCallResponse'
  /api/cxunity-analytics-api/v1/dashboards:
    get:
      tags:
        - dashboards
      summary: Get all dashboards
      operationId: getDashboards
      parameters:
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OraclePagedResourcesDashboardMetadataDTO'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - dashboards
      summary: Create a dashboard
      operationId: createDashboard
      parameters:
        - name: dashboard
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/DashboardMetadataDTO'
        - name: html
          in: query
          required: false
          schema:
            type: string
            default: ""
        - name: json
          in: query
          required: false
          schema:
            type: string
            default: ""
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DashboardMetadataDTO'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/cxunity-analytics-api/v1/dashboards/{id}:
    get:
      tags:
        - dashboards
      summary: Get the dashboard
      operationId: getDashboardById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DashboardMetadataDTO'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: No Content
          content: {}
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - dashboards
      summary: Update the dashboard
      operationId: updateDashboard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: dashboard
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/DashboardMetadataDTO'
        - name: html
          in: query
          required: false
          schema:
            type: string
            default: ""
        - name: json
          in: query
          required: false
          schema:
            type: string
            default: ""
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DashboardMetadataDTO'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - dashboards
      summary: Delete the dashboard
      operationId: deleteDashboardById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: No Content
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/cxunity-blobs-api/v1/blobs/{id}:
    get:
      summary: Get single blob metadata
      operationId: getBlobsMetaDataById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BlobsMetadata'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: No Content
          content: {}
    put:
      summary: Update the blob content & metadata
      operationId: updateBlob
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: content
          in: query
          required: true
          schema:
            type: string
        - name: contentType
          in: query
          required: true
          schema:
            type: string
      responses:
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BlobsMetadata'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete the blob content & metadata
      operationId: deleteBlobById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/cxunity-blobs-api/v1/blobs/{id}/data:
    get:
      summary: Get single blob in original content type
      operationId: getBlobsDataById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InputStreamResource'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: No Content
          content: {}
  /api/cxunity-blobs-api/v1/blobs:
    post:
      summary: Create a blob content & metadata
      operationId: saveBlob
      parameters:
        - name: content
          in: query
          required: true
          schema:
            type: string
        - name: contentType
          in: query
          required: true
          schema:
            type: string
      responses:
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BlobsMetadata'
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /connectors/api:
    get:
      summary: Get Connector Api details
      description: Reads data from External Application
      operationId: get
      parameters:
        - name: url
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                type: object
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                type: object
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                type: object
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: object
  /connectors/sources:
    get:
      operationId: getSources
      responses:
        "200":
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectorsList'
  /connectors/{targetSystem}/{connectionType}/{version}:
    get:
      summary: Method to fetch particular connector details
      description: fetches particular connector details
      operationId: getConnector
      parameters:
        - name: targetSystem
          in: path
          required: true
          schema:
            type: string
        - name: connectionType
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connectors'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connectors'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connectors'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connectors'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connectors'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connectors'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connectors'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connectors'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connectors'
  /connectors:
    get:
      summary: Method to Get all Connectors
      description: Get all connectors
      operationId: getAllConnectors
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connectors'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connectors'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connectors'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connectors'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connectors'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connectors'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connectors'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connectors'
    post:
      summary: Method to Create Connectors
      description: Connectors as payload and creates connectors
      operationId: createConnector
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connectors'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connectors'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connectors'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connectors'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connectors'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connectors'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connectors'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connectors'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connectors'
  /connectors/destinations:
    get:
      operationId: getDestinations
      responses:
        "200":
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectorsList'
  /data_objects/{id}:
    get:
      summary: Method to get a single data object based on its unique id
      operationId: get_1
      parameters:
        - name: id
          in: path
          description: Unique ID of data object
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
    put:
      summary: Method to update data object with unique id and payload of CXUDataObject.class
      operationId: update
      parameters:
        - name: id
          in: path
          description: Unique ID of data object
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CXUDataObject'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
    delete:
      summary: Method to delete data object
      description: ' Deleted the data object with the speciifed data objectId'
      operationId: deleteDataObject
      parameters:
        - name: id
          in: path
          description: Unique ID of data object to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
        "204":
          description: No Content
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "405":
          description: Method Not Supported
        "412":
          description: Precondition Not Met
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
  /data_objects:
    get:
      summary: Method to get all data objects
      operationId: getAllDataObjects
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CXUDataObject'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CXUDataObject'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CXUDataObject'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CXUDataObject'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CXUDataObject'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CXUDataObject'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CXUDataObject'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CXUDataObject'
    post:
      summary: Method to create a Data object
      operationId: create
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CXUDataObject'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CXUDataObject'
  /data_objects/findByObjectIds:
    post:
      summary: 'Method to get specified data objects list '
      description: 'Payload: list of data object ids.'
      operationId: findByObjectIds
      requestBody:
        content:
          '*/*':
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CXUDataObject'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CXUDataObject'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CXUDataObject'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CXUDataObject'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CXUDataObject'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CXUDataObject'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CXUDataObject'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CXUDataObject'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CXUDataObject'
  /data_viewer/searches/{dataObjectId}:
    get:
      summary: Method to fetch all saved searches list
      operationId: getSavedSearches
      parameters:
        - name: dataObjectId
          in: path
          description: Data object id (tableId) for which the search details need to be fetched
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataViewerSearch'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataViewerSearch'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataViewerSearch'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataViewerSearch'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataViewerSearch'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataViewerSearch'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataViewerSearch'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataViewerSearch'
    post:
      summary: Method to save a Search
      operationId: saveSearch
      parameters:
        - name: dataObjectId
          in: path
          description: Data object id (tableId) for which the search details need to be saved
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DataViewerSearch'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
  /data_viewer/searches/{dataObjectId}/{searchId}:
    get:
      summary: Method to get a Search
      operationId: getSearch
      parameters:
        - name: dataObjectId
          in: path
          description: Data object id (tableId) for which the search need to be fetched
          required: true
          schema:
            type: string
        - name: searchId
          in: path
          description: searchId for the search need to be fetched
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
    put:
      summary: Method to update a saved search of a data object
      operationId: updateSearchById
      parameters:
        - name: dataObjectId
          in: path
          description: Data object id (tableId) for which the search need to be updated
          required: true
          schema:
            type: string
        - name: searchId
          in: path
          description: searchId for the saved search that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DataViewerSearch'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewerSearch'
    delete:
      summary: Method to delete data viewer search
      description: ' Delete the search with the specified search id'
      operationId: deleteSearch
      parameters:
        - name: dataObjectId
          in: path
          description: Data object id (tableId) for which the search need to be updated
          required: true
          schema:
            type: string
        - name: searchId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
        "204":
          description: No Content
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "405":
          description: Method Not Supported
        "412":
          description: Precondition Not Met
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
  /eloquaAuth:
    post:
      summary: Post For Eloqua Authentication.
      description: Verifies Authentication for eloqua
      operationId: doEloquaAuthentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EloquaAuthentication'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EloquaContactFieldElement'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EloquaContactFieldElement'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EloquaContactFieldElement'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EloquaContactFieldElement'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EloquaContactFieldElement'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EloquaContactFieldElement'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EloquaContactFieldElement'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EloquaContactFieldElement'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EloquaContactFieldElement'
  /events_mcps_instances:
    get:
      summary: Method to fetch event list based on type
      description: 'calling mcps api /eventtypes/${eventTarget}/${eventType} and fetches event instance'
      operationId: getEventInstances
      parameters:
        - name: target
          in: query
          description: 'Targets to fetch events eg : Cart,Article,Document,Email etc.,'
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: 'Type to fetch events eg : Added,Downloaded,Opened,Clicked etc.,'
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
  /events_mcps_instances/{target}/{type}:
    delete:
      summary: Delete Event
      description: 'calling mcps api /eventtypes/${eventTarget}/${eventType} and delets particular event'
      operationId: deleteEvent
      parameters:
        - name: target
          in: path
          description: 'Targets to fetch events eg : Cart,Article,Document,Email etc.,'
          required: true
          schema:
            type: string
        - name: type
          in: path
          description: 'Type to fetch events eg : Added,Downloaded,Opened,Clicked etc.,'
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
        "204":
          description: No Content
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "405":
          description: Method Not Supported
        "412":
          description: Precondition Not Met
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
  /events_mcps_instances_create:
    post:
      summary: Creates Event
      description: 'calling mcps api /eventtypes/${eventTarget}/${eventType} with POST request and creates event with payload Events.class'
      operationId: createEventInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Events'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
  /events_mcps_instances_update:
    put:
      summary: Update Event
      description: 'calling mcps api /eventtypes/${eventTarget}/${eventType} with PUT and updates event with payload Events.class'
      operationId: updateEventInstance
      parameters:
        - name: target
          in: query
          required: false
          schema:
            type: string
        - name: type
          in: query
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Events'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
  /mcps_tables/{tableId}/foreignkeys/{id}:
    get:
      summary: Executes a query and returns single foreign key based on id and tableId.
      description: 'Calls MCPS route: mcps-metadata-api/v1/[tenant key]/tables/${tableId}/foreignkeys/${foreignkey} to get single foreign key'
      operationId: get_2
      parameters:
        - name: tableId
          in: path
          description: Table ID to fetch foreign keys
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Foreign key ID to fetch particular foreign key
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/McpsForeignKey'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/McpsForeignKey'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/McpsForeignKey'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/McpsForeignKey'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/McpsForeignKey'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/McpsForeignKey'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/McpsForeignKey'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/McpsForeignKey'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/McpsForeignKey'
    delete:
      summary: Method to delete foreign key
      description: 'Calls MCPS route: mcps-metadata-api/v1/[tenant key]/tables/${tableId}/foreignkeys/${foreignkey} with delete request to delete foreign key'
      operationId: delete
      parameters:
        - name: tableId
          in: path
          description: Table ID to fetch foreign keys
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Foreign key ID to delete
          required: true
          schema:
            type: string
        - name: single
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json: {}
        "204":
          description: No Content
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "405":
          description: Method Not Supported
        "412":
          description: Precondition Not Met
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
  /mcps_tables/{tableId}/foreignkeys:
    post:
      summary: Executes a query and creates foreign key.
      description: 'Calls MCPS route: mcps-metadata-api/v1/[tenant key]/tables/${tableId}/foreignkeys with payload McpsForeignKey and creates a foreign key'
      operationId: create_1
      parameters:
        - name: tableId
          in: path
          description: Table ID to fetch foreign keys
          required: true
          schema:
            type: string
        - name: single
          in: query
          required: false
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/McpsForeignKey'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/McpsForeignKey'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionPresenterMcpsForeignKey'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionPresenterMcpsForeignKey'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionPresenterMcpsForeignKey'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionPresenterMcpsForeignKey'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionPresenterMcpsForeignKey'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionPresenterMcpsForeignKey'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionPresenterMcpsForeignKey'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionPresenterMcpsForeignKey'
  /mcps_tables/foreign_keys:
    post:
      summary: Method to create foreign keys with Attributes.
      description: 'Calls MCPS route: and creates FK in parent/child obj'
      operationId: create_2
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ParentChildFKWrapper'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/McpsForeignKey'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/McpsForeignKey'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/McpsForeignKey'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/McpsForeignKey'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/McpsForeignKey'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/McpsForeignKey'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/McpsForeignKey'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/McpsForeignKey'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/McpsForeignKey'
  /v1/enrichmentConfigurations/odc:
    post:
      summary: Create clustering to Promotion rules
      description: Endpoint to reads InputParameters and create configuration and promotion rule
      operationId: create_3
      parameters:
        - name: params
          in: header
          description: Configuration details
          required: true
          schema: {}
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/InputParameters'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "204":
          description: No Content
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "405":
          description: Method Not Supported
        "412":
          description: Precondition Not Met
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
  /v1/enrichmentConfigurations/odc/taxonomy:
    get:
      summary: Get CategoryList
      description: Reads Taxonomy.json and gets Enrichment Category list
      operationId: getCategoryList
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
  /jobs/{type}/{id}:
    get:
      summary: Method to fetch Job with unique ID
      operationId: get_3
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: runDetails
          in: query
          description: 'Flag to fetch runDetails : default value false'
          required: false
          schema:
            type: boolean
            default: false
        - name: runId
          in: query
          description: Unique ID to of Run details for a Job
          required: false
          schema:
            type: string
            default: ''
        - name: versionTS
          in: query
          description: Modified Time stamp filter
          required: false
          schema:
            type: string
            default: ''
        - name: getDetails
          in: query
          description: 'Boolean flag to fetch details : Default : false'
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
    put:
      summary: Method to update Job details
      operationId: updateJob
      parameters:
        - name: type
          in: path
          description: 'Job type Filter eg : Dw,INGEST,QUERYEXPORT'
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique Job ID filter
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                type: string
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                type: string
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: string
  /jobs:
    get:
      summary: Method to fetch Job Detail
      operationId: returnPageJobs
      parameters:
        - name: limit
          in: query
          description: Number of records to return. Default 50
          required: false
          schema:
            type: integer
            format: int32
            default: 50
        - name: offset
          in: query
          description: Index to fetch the records default 0
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: search
          in: query
          description: Search filters
          required: false
          schema:
            type: string
        - name: filter
          in: query
          description: Filters to apply
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: 'Job type Filter eg : Dw,INGEST,QUERYEXPORT : Default ALL'
          required: false
          schema:
            type: string
            default: ''
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThinJob'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OraclePagedResourcesThinJob'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OraclePagedResourcesThinJob'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OraclePagedResourcesThinJob'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OraclePagedResourcesThinJob'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OraclePagedResourcesThinJob'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OraclePagedResourcesThinJob'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OraclePagedResourcesThinJob'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OraclePagedResourcesThinJob'
    post:
      summary: Method to create JOB
      description: Calls mcps /jobs with payload Job to create a new job
      operationId: postJob
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                type: string
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                type: string
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: string
  /jobs/summaries:
    get:
      summary: Method to fetch Job details for dashboard page
      operationId: getMCPSJobSummaryDashboard
      parameters:
        - name: startTs
          in: query
          description: Time stamp from when jobs should fetch
          required: true
          schema:
            type: integer
            format: int64
        - name: endTs
          in: query
          description: Time stamp limit of jobs should fetch
          required: true
          schema:
            type: integer
            format: int64
        - name: offset
          in: query
          description: Index to fetch the records
          required: true
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of records to return
          required: true
          schema:
            type: integer
            format: int32
        - name: q
          in: query
          description: Query to fetch Job details
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MCPSJobSummary'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MCPSJobSummary'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MCPSJobSummary'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MCPSJobSummary'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MCPSJobSummary'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MCPSJobSummary'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MCPSJobSummary'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MCPSJobSummary'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MCPSJobSummary'
  /jobs/dashboard/jobNames:
    get:
      summary: Method to GET Job Names
      description: Calls MCPS route /jobs to fetch job details and finds Job Names
      operationId: getJobNamesDashboard
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MCPSJobMetadata'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MCPSJobMetadata'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MCPSJobMetadata'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MCPSJobMetadata'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MCPSJobMetadata'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MCPSJobMetadata'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MCPSJobMetadata'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MCPSJobMetadata'
  /jobs/{type}:
    get:
      summary: Method to fetch Job details of particular type
      operationId: getJobs
      parameters:
        - name: type
          in: path
          description: 'Job type Filter eg : Dw,INGEST,QUERYEXPORT'
          required: true
          schema:
            type: string
        - name: before
          in: query
          required: false
          schema:
            type: string
            default: ''
        - name: target
          in: query
          required: false
          schema:
            type: string
            default: ''
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
  /jobs/INGEST/diff:
    get:
      summary: Method to fetch difference in snapshot for INGEST jobs at a given timestamp
      operationId: getIngestJobsDiff
      parameters:
        - name: target
          in: query
          description: timstamp to load the diff for
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
  /jobs/{type}/{id}/{operation}:
    put:
      summary: Method to copy or rename particular job
      operationId: copyOrRenameJob
      parameters:
        - name: type
          in: path
          description: 'Job type Filter eg : Dw,INGEST,QUERYEXPORT'
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique Job ID filter
          required: true
          schema:
            type: string
        - name: operation
          in: path
          description: 'Job Operation filter eg : restart/delete/stop'
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                type: string
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                type: string
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: string
    post:
      summary: Method to submit operation of job to mcps routes /stop /publish /restart
      operationId: manageJob
      parameters:
        - name: id
          in: path
          description: Unique Job ID filter
          required: true
          schema:
            type: string
        - name: type
          in: path
          description: 'Job type Filter eg : Dw,INGEST,QUERYEXPORT'
          required: true
          schema:
            type: string
        - name: operation
          in: path
          description: 'Job Operation filter eg : restart/delete/stop'
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                type: string
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                type: string
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: string
  /jobs/{jobType}/{jobId}/exe-log:
    get:
      summary: Method to fetch execution logs for particular job
      operationId: executeLog
      parameters:
        - name: jobType
          in: path
          description: 'Job type Filter eg : Dw,INGEST,QUERYEXPORT'
          required: true
          schema:
            type: string
        - name: jobId
          in: path
          description: Unique Job ID filter
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: object
                    additionalProperties:
                      type: string
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: object
                    additionalProperties:
                      type: string
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: object
                    additionalProperties:
                      type: string
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: object
                    additionalProperties:
                      type: string
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: object
                    additionalProperties:
                      type: string
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: object
                    additionalProperties:
                      type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: object
                    additionalProperties:
                      type: string
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: object
                    additionalProperties:
                      type: string
  /jobs/{jobId}/source-object:
    get:
      summary: Method to fetch source objects for particular job
      operationId: getSourceObjectList
      parameters:
        - name: jobId
          in: path
          description: Unique Job ID filter
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: object
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: object
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: object
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: object
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: object
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: object
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: object
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: object
  /jobs/{jobType}/{jobId}/status:
    get:
      summary: Method to get Job status for particular Job
      operationId: getJobStatus
      parameters:
        - name: jobType
          in: path
          description: 'Job type Filter eg : Dw,INGEST,QUERYEXPORT'
          required: true
          schema:
            type: string
        - name: jobId
          in: path
          description: Unique Job ID filter
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                type: string
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                type: string
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: string
  /jobs/validateDateFormat:
    get:
      summary: Method to validate date format
      operationId: validateDateFormat
      parameters:
        - name: dateFormatString
          in: query
          description: Date format to validate
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                type: boolean
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: boolean
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: boolean
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                type: boolean
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                type: boolean
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                type: boolean
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: boolean
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: boolean
  /mcps/data/execute:
    post:
      summary: Executes a query and returns results.
      description: "Calls MCPS route: mcps-data-api/v1/[tenant key]/data/query/execute \n Payload: One of the supported query objects. Currently MCPSQuery"
      operationId: mpcsExecute
      parameters:
        - name: limit
          in: query
          description: Number of records to return. Max is 1K. Default 100
          required: false
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/JsonNode'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
  /mcps/data/count:
    post:
      summary: Returns the count of the given query.
      description: 'Calls MCPS route: mcps-data-api/v1/[tenant key]/data/query/count \n Payload: One of the supported query objects. Currently MCPSQuery'
      operationId: mpcsCount
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/JsonNode'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
  /mcps/data/persist:
    post:
      summary: Executes a query and stores the result. Async query. Clients can check status using job id.
      description: 'Calls MCPS route: mcps-data-api/v1/[tenant key]/data/query/persist \n Payload: The uniqueId of one of the supported query objects. Currently MCPSQuery. The query must be previously persisted.'
      operationId: mpcsPersist
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/JsonNode'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
  /mcps/data/status:
    post:
      summary: Returns the current status/info of a result
      description: 'Payload: QueryResult object.'
      operationId: mpcsStatus
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/JsonNode'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
  /mcps/data/fetch:
    post:
      summary: Fetches the data associated to a result
      description: 'Payload: QueryResult object.'
      operationId: mpcsFetch
      parameters:
        - name: part
          in: header
          description: The part to fetch data from. Default 1. Part info is returned in QueryResult object once query completes.
          schema: {}
      requestBody:
        content:
          '*/*':
            schema:
              type: object
              properties:
                queryResults:
                  $ref: '#/components/schemas/JsonNode'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            text/csv:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            text/csv:
              schema:
                type: string
        "403":
          description: Forbidden
          content:
            text/csv:
              schema:
                type: string
        "404":
          description: Resource Not Found
          content:
            text/csv:
              schema:
                type: string
        "405":
          description: Method Not Supported
          content:
            text/csv:
              schema:
                type: string
        "412":
          description: Precondition Not Met
          content:
            text/csv:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            text/csv:
              schema:
                type: string
        "503":
          description: Service Unavailable
          content:
            text/csv:
              schema:
                type: string
  /mcps/metadata:
    get:
      summary: Fetch mcps metada
      description: Endpoint to call Mcps Metadata to fetch the details
      operationId: metaGet
      parameters:
        - name: path
          in: query
          description: Endpoint path to execute
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
    put:
      summary: Create mcps metadata
      description: Endpoint to call Mcps Metadata for inserting segment details
      operationId: metaPut
      parameters:
        - name: path
          in: query
          description: Endpoint path to execute
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/JsonNode'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
    post:
      summary: Update mcps metada
      description: Endpoint to call Mcps Metadata for updating the segment details
      operationId: metaPost
      parameters:
        - name: path
          in: query
          description: Endpoint path to execute
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/JsonNode'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
    delete:
      summary: Delete mcps metada
      description: Endpoint to call Mcps Metadata for deleting the segment details
      operationId: metaDelete
      parameters:
        - name: path
          in: query
          description: Endpoint path to execute
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
        "204":
          description: No Content
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "405":
          description: Method Not Supported
        "412":
          description: Precondition Not Met
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
  /mcps/metadata/tenant_last_publish_ts:
    get:
      summary: Method for getting publish data.
      description: Retrieves tenant publish date based on the format
      operationId: getTenantLastPublishTS
      parameters:
        - name: format
          in: query
          description: 'Format of publish data : possible values : dmyb,dmy,ts'
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                type: string
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                type: string
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: string
  /mcps/metadata/publish_tenant:
    post:
      summary: Publish Tenant
      description: Endpoint to publisb tenant details
      operationId: publishTenant
      parameters:
        - name: isNewTenant
          in: query
          description: 'Identify new publish tenant : possible values : true, false'
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                type: string
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                type: string
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: string
  /mcps/metadata/publish_status:
    get:
      summary: Get Publish status
      description: Endpoint to fetch tenant publish status
      operationId: publishJobRunningStatus
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                type: boolean
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: boolean
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: boolean
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                type: boolean
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                type: boolean
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                type: boolean
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: boolean
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: boolean
  /notifications/{id}:
    get:
      summary: Get Method to fetch Notification details
      description: 'Calls MCPS route: /notifications/HTTP/ for getting notifications'
      operationId: fetchMCPSNtf
      parameters:
        - name: id
          in: path
          description: Notification ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
  /responsysAuth:
    post:
      summary: Post For Responsys Authentication.
      description: Verifies Authentication for responsys
      operationId: doResponsysAuthentication
      parameters:
        - name: Responsys
          in: header
          description: Responys input for authentication
          schema: {}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Responsys'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Responsys'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Responsys'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Responsys'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Responsys'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Responsys'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Responsys'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Responsys'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Responsys'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Responsys'
  /profileList:
    post:
      summary: Post For fetching responsys Profiles.
      description: Fetches profile details by calling endpoint /rest/api/v1.3/lists
      operationId: fetchProfileList
      parameters:
        - name: Responsys
          in: header
          description: Responys input for profile list
          schema: {}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Responsys'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /sinkMcpsInstances/{id}:
    get:
      summary: Method to fetch particular Sink details
      description: 'Calls MCPS route: mcps-metadata-api /sinkinstances/${sinkInstanceId} and finds particular sink'
      operationId: getSinkInstance
      parameters:
        - name: id
          in: path
          description: Unique Sink ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
  /sinkMcpsInstances:
    get:
      summary: Get all Sink details
      description: 'Calls MCPS route: mcps-metadata-api /sinkinstances and fetches all sink details'
      operationId: getSinkInstances
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SinkBO'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SinkBO'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SinkBO'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SinkBO'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SinkBO'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SinkBO'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SinkBO'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SinkBO'
    post:
      summary: Method to create sink
      description: 'Calls MCPS route: mcps-metadata-api /sinkinstances and create sink with payload Sink.class'
      operationId: createSinkInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sink'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
  /sinkMcpsInstances/{uniqueId}:
    put:
      summary: Method to update sink instance
      description: 'Calls MCPS route: mcps-metadata-api /sinkinstances/${sinkInstanceId} and updates particular sink'
      operationId: updateSinkInstances
      parameters:
        - name: uniqueId
          in: path
          description: Unique Id of sink
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sink'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
    delete:
      summary: 'Executes mcps query /sinkinstances/${sinkInstanceId} and delets sink having uniqueId'
      operationId: deleteSinkInstances
      parameters:
        - name: uniqueId
          in: path
          description: Unique Sink ID to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
        "204":
          description: No Content
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "405":
          description: Method Not Supported
        "412":
          description: Precondition Not Met
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
  /sinkMcpsInstances/copy:
    post:
      summary: Method to copy sink based on unique instance id
      description: 'Calls MCPS route: mcps-metadata-api /sinkinstances and Creates sink with Copy existing Sink with newUniqueInstanceId, Name and Description in payload hashmap'
      operationId: copySinkInstances
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sink'
  /sinkMcpsInstances/lastExportTs:
    post:
      summary: Method to fetch last export timestamp for sinks
      description: Calls mcps getJobSummaries and calculates last export ts for each modified job
      operationId: getSinkLastImportTS
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SinkBO'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SinkBO'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SinkBO'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SinkBO'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SinkBO'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SinkBO'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SinkBO'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SinkBO'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SinkBO'
  /sinkSFTPConnectionCheck:
    post:
      summary: Method to check sftp connection.
      description: Tries to enable ftp connection with payload Sink.class using jsch
      operationId: checkSFTPConnections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sink'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: boolean
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: boolean
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: boolean
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                type: boolean
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                type: boolean
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                type: boolean
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: boolean
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: boolean
  /sinkMcpsInstances/validate_id/{truncatedId}:
    get:
      summary: Calls mcps and fetches sorted latest sinkId from sinkId list
      operationId: getSinkInstanceId
      parameters:
        - name: truncatedId
          in: path
          description: Unique ID to validate sink details
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                type: string
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                type: string
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: string
  /source_mcps_instances/{id}:
    get:
      summary: Method to fetch particular Source details
      description: 'Calls MCPS route /sourceinstances/${sourceInstanceId} and fetches particular source details'
      operationId: getSourceInstance
      parameters:
        - name: id
          in: path
          description: Unique Source ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
  /source_mcps_instances:
    get:
      summary: Method to feth sources
      description: 'Calls MCPS route: mcps-metadata-api /sourceinstances and gets all the source instances'
      operationId: getSourceInstances
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceBO'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceBO'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceBO'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceBO'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceBO'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceBO'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceBO'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceBO'
    post:
      summary: Method to Create Source
      description: 'Calls MCPS route: /sourceinstances with Source as payload and creates Source Instance'
      operationId: createSourceInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Source'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
  /source_mcps_instances/{uniqueId}:
    put:
      summary: Method to update source details
      description: 'Calls MCPS route: /sourceinstances/${sourceInstanceId} with payload Source.class and Updates source details'
      operationId: updateSourceInstances
      parameters:
        - name: uniqueId
          in: path
          description: Unique Source ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Source'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
    delete:
      summary: Method to delete source
      description: 'Calls MCPS route: /sourceinstances/${sourceInstanceId} and delets the source'
      operationId: deleteSourceInstances
      parameters:
        - name: uniqueId
          in: path
          description: Unique ID of source to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
        "204":
          description: No Content
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "405":
          description: Method Not Supported
        "412":
          description: Precondition Not Met
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
  /source_mcps_instances/copy:
    post:
      summary: Method to copy source based on unique instance id
      description: 'Calls MCPS route: /sourceinstances and Copies existing Source with newUniqueInstanceId, Name and Description in payload hashmap'
      operationId: copySourceInstances
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
  /source_mcps_instances/last_import_ts:
    post:
      summary: Method to get last import time stamp for sources
      description: Calls mcps getMCPSJobSummary and calculates last import timestamp for each modified job
      operationId: getSourceLastImportTS
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SourceBO'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceBO'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceBO'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceBO'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceBO'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceBO'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceBO'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceBO'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceBO'
  /source_mcps_instances/validate_id/{truncatedId}:
    get:
      summary: Method to fetch latest source ID
      description: Calls mcps and fetches sorted latest sourceId
      operationId: getSourceInstancesWithId
      parameters:
        - name: truncatedId
          in: path
          description: Unique ID to validate sort details
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                type: string
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                type: string
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: string
  /source_sample_files/parse:
    post:
      summary: Fetch source fields.
      description: Endpoint to parse the uploaded file and fetch source fields
      operationId: parseFields
      parameters:
        - name: file
          in: query
          description: File of Multipart type
          required: true
          schema:
            type: object
            properties:
              file:
                type: string
                format: binary
        - name: charset
          in: query
          description: 'Charset of uploading file eg : UTF-8'
          required: true
          schema:
            type: string
        - name: delimiter
          in: query
          description: Delimiter to parse and fetch the source fields
          required: true
          schema:
            type: string
        - name: extension
          in: query
          description: File extension
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
  /source_sample_files/read:
    post:
      summary: Fetch file content
      description: Endpoint to read the file and returns the content
      operationId: readFile
      parameters:
        - name: file
          in: query
          description: File of Multipart type
          required: true
          schema:
            type: object
            properties:
              file:
                type: string
                format: binary
        - name: charset
          in: query
          description: 'Charset of uploading file eg : UTF-8'
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                type: string
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                type: string
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: string
  /cxunity/segmentation/v1/features/{name}:
    get:
      tags:
        - Features
      summary: Find feature by name
      description: returns a single feature
      operationId: getFeature
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeatureModel'
    put:
      tags:
        - Features
      summary: Update flag
      operationId: putFeature
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: enabled - set to true to enable feature, false to disable
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/FeatureModel'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeatureModel'
    post:
      tags:
        - Features
      summary: Add feature
      operationId: addFeature
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: enabled - set to true to enable feature, false to disable
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/FeatureModel'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeatureModel'
  /cxunity/segmentation/v1/features:
    get:
      tags:
        - Features
      summary: Get all features
      description: Get list of all features
      operationId: getFeatures
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceFeatureModel'
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeatureModel'
  /cxunity/segmentation/v1/navigation:
    get:
      tags:
        - Navigations
      summary: Get segment palette
      description: Get segmentation palette information
      operationId: getNavigation
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayNode'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayNode'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayNode'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayNode'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayNode'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayNode'
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayNode'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayNode'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayNode'
  /cxunity/segmentation/v1/preferences:
    get:
      tags:
        - Preferences
      summary: Get preferences
      description: Get list of all preferences
      operationId: getAllPreferences
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PreferenceModel'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourcePreferenceModel'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourcePreferenceModel'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourcePreferenceModel'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourcePreferenceModel'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourcePreferenceModel'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourcePreferenceModel'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourcePreferenceModel'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourcePreferenceModel'
    post:
      tags:
        - Preferences
      summary: Create preference
      operationId: postPreference
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PreferenceModel'
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceModel'
  /cxunity/segmentation/v1/preferences/{name}:
    get:
      tags:
        - Preferences
      summary: Find preferences by name
      description: returns a single preferences
      operationId: getPreference
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "200":
          description: success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PreferenceModel'
    put:
      tags:
        - Preferences
      summary: Update preference
      description: 'Note: if the value does not exists, it will be created'
      operationId: putPreference
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PreferenceModel'
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "200":
          description: success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PreferenceModel'
    delete:
      tags:
        - Preferences
      summary: Delete Preference
      operationId: deletePreference
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Bad Request
        "405":
          description: Method Not Supported
        "412":
          description: Precondition Not Met
        "404":
          description: Resource Not Found
        "204":
          description: No Content
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
        "200":
          description: success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PreferenceModel'
        "503":
          description: Service Unavailable
  /cxunity/segmentation/v1/schemaSnapshots/published:
    get:
      tags:
        - Schema
      summary: Get Published Schema
      operationId: returnDataModelPublished
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 999999
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: system
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: complex
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: binary
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: data_object
          in: query
          required: false
          schema:
            type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceDataObjectModel'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceDataObjectModel'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceDataObjectModel'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceDataObjectModel'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceDataObjectModel'
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataObjectModel'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceDataObjectModel'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceDataObjectModel'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceDataObjectModel'
  /cxunity/segmentation/v1/segments/{uniqueId}:
    get:
      tags:
        - Segments
      summary: Find segment by ID
      description: returns a single Segment
      operationId: get
      parameters:
        - name: uniqueId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentModel'
    put:
      tags:
        - Segments
      summary: Update an existing segment
      operationId: put
      parameters:
        - name: uniqueId
          in: path
          required: true
          schema:
            type: string
        - name: mcps
          in: query
          description: mcps - set to true to update MCPS
          required: false
          schema:
            type: boolean
            default: false
        - name: saveTemplate
          in: query
          description: saveTemplate - save template in a non-draft mode
          required: false
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SegmentModel'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentModel'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentModel'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentModel'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentModel'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentModel'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentModel'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentModel'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentModel'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentModel'
    delete:
      tags:
        - Segments
      summary: Deletes a segment
      operationId: delete
      parameters:
        - name: uniqueId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SegmentModel'
        "400":
          description: Bad Request
        "404":
          description: Resource Not Found
        "204":
          description: No Content
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
        "503":
          description: Service Unavailable
  /cxunity/segmentation/v1/segments/{uniqueId}/cancel:
    post:
      tags:
        - Segments
      summary: Cancel draft segment
      operationId: cancel
      parameters:
        - name: uniqueId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: default response
          content:
            application/json:
              schema:
                type: object
  /cxunity/segmentation/v1/segments/counts:
    get:
      tags:
        - Segments
      summary: 'Get total count of Segments '
      operationId: getCount
      parameters:
        - name: search
          in: query
          description: Search based on name or description
          required: false
          schema:
            type: string
            default: ""
        - name: quick
          in: query
          description: Quick Filter
          required: false
          schema:
            type: string
            default: ""
        - name: type
          in: query
          description: Segment type
          required: false
          schema:
            type: string
            default: ""
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                type: object
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                type: object
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                type: object
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: object
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: object
  /cxunity/segmentation/v1/segments:
    get:
      tags:
        - Segments
      summary: Get segments
      description: Get list of all segments
      operationId: returnPagedSegments
      parameters:
        - name: limit
          in: query
          description: Maximum number of segments to return
          required: false
          schema:
            type: integer
            format: int32
            default: 20
        - name: offset
          in: query
          description: Return segments starting from this offset
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: sortBy
          in: query
          description: Sort by field
          required: false
          schema:
            type: string
            default: name
        - name: order
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            default: asc
        - name: search
          in: query
          description: Search based on name or description
          required: false
          schema:
            type: string
            default: ""
        - name: quick
          in: query
          description: Quick Filter
          required: false
          schema:
            type: string
            default: ""
        - name: type
          in: query
          description: Segment type
          required: false
          schema:
            type: string
            default: ""
        - name: tabFilter
          in: query
          description: tab filter
          required: false
          schema:
            type: string
            default: ""
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OraclePagedResourcesSegmentModel'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OraclePagedResourcesSegmentModel'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OraclePagedResourcesSegmentModel'
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SegmentModel'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OraclePagedResourcesSegmentModel'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OraclePagedResourcesSegmentModel'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OraclePagedResourcesSegmentModel'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OraclePagedResourcesSegmentModel'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OraclePagedResourcesSegmentModel'
    post:
      tags:
        - Segments
      summary: Add a new segment
      operationId: post
      parameters:
        - name: mcps
          in: query
          description: mcps - set to true to update MCPS
          required: false
          schema:
            type: boolean
            default: false
        - name: saveTemplate
          in: query
          description: saveTemplate - save template in a non-draft mode
          required: false
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SegmentModel'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentModel'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentModel'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentModel'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentModel'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentModel'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentModel'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentModel'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentModel'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentModel'
  /cxunity/segmentation/v1/segments/guid:
    get:
      tags:
        - Segments
      summary: Get GUID
      description: Get a gobal unique ID
      operationId: getGUID
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                type: string
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: string
  /cxunity/segmentation/v1/segments/load_mcps:
    post:
      tags:
        - Segments
      summary: Load segments from MCPS
      operationId: loadMCPS
      responses:
        "200":
          description: successful operation
          content:
            '*/*':
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                type: string
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                type: string
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                type: string
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: string
  /cxunity/segmentation/v1/segments/{segmentId}/count:
    post:
      tags:
        - Segments
      summary: Get segment count by segmentId
      operationId: postSegmentCount
      parameters:
        - name: segmentId
          in: path
          description: Name of seqment
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "405":
          description: Method Not Supported
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "412":
          description: Precondition Not Met
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "404":
          description: Resource Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "204":
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "200":
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
        "503":
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JsonNode'
  /cxunity/segmentation/v1/segments/count:
    post:
      tags:
        - Segments
      summary: Get query count
      operationId: postCount
      requestBody:
        description: MCPS Json Query
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/JsonNode'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonNode'
  /cxunity/segmentation/v1/validate/{name}/uniqueness:
    get:
      tags:
        - Validation
      summary: Segment uniquness
      description: Validate segment name for uniquness
      operationId: uniqueness
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                type: object
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                type: object
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                type: object
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: object
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: object
  /cxunity/segmentation/v1/tenantpreferences:
    get:
      tags:
        - Tenant preferences
      summary: Get preferences
      description: Get list of all tenant preferences
      operationId: getTenantPreferences
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceTenantPreference'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceTenantPreference'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceTenantPreference'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceTenantPreference'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceTenantPreference'
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TenantPreference'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceTenantPreference'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceTenantPreference'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResourceTenantPreference'
  /cxunity/segmentation/v1/tenantpreferences/{name}/{key}:
    get:
      tags:
        - Tenant preferences
      summary: 'Get a preferences '
      description: Get tenant preferences by name and key
      operationId: getTenantPreferences_1
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: key
          in: path
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TenantPreference'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TenantPreference'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TenantPreference'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TenantPreference'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TenantPreference'
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TenantPreference'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TenantPreference'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TenantPreference'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TenantPreference'
    post:
      tags:
        - Tenant preferences
      summary: Create or update preference
      operationId: postTenantPreference
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: key
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/TenantPreference'
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantPreference'
        "405":
          description: Method Not Supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantPreference'
        "412":
          description: Precondition Not Met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantPreference'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantPreference'
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantPreference'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantPreference'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantPreference'
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantPreference'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantPreference'
  /cxunity/authorization/v1/ootb-policies:
    get:
      description: Gets ootb policies
      operationId: getOotbPolicies
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  type: string
                type: array
          description: Success
        "403":
          content:
            '*/*':
              schema:
                items:
                  type: string
                type: array
          description: Access denied
        "500":
          content:
            '*/*':
              schema:
                items:
                  type: string
                type: array
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Gets ootb policies
      summary: Gets ootb policies
      tags:
        - roles-controller
  /cxunity/authorization/v1/ootb-roles:
    get:
      description: Gets ootb roles
      operationId: getOotbRoles
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Role'
                type: array
          description: Success
        "403":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Role'
                type: array
          description: Access denied
        "500":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Role'
                type: array
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Gets ootb roles
      summary: Gets ootb roles
      tags:
        - roles-controller
  /cxunity/authorization/v1/policies:
    get:
      description: Get all policies
      operationId: getPolicies
      parameters:
        - in: query
          name: type
          required: false
          schema:
            enum:
              - ootb
              - customized
            type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/PdlPolicy'
                type: array
          description: Success
        "403":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/PdlPolicy'
                type: array
          description: Access denied
        "500":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/PdlPolicy'
                type: array
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get all policies
      summary: Get all policies
      tags:
        - roles-controller
    post:
      description: Create policy
      operationId: addPdlPolicy
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PdlPolicy'
          description: Success
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PdlPolicy'
          description: Access denied
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PdlPolicy'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Create policy
      summary: Create policy
      tags:
        - roles-controller
  /cxunity/authorization/v1/policies/{policyId}:
    delete:
      description: Delete policy by policy id
      operationId: deletePolicy
      parameters:
        - in: path
          name: policyId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Success
        "403":
          description: Access denied
        "404":
          description: Not found
        "500":
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Delete policy by policy id
      summary: Delete policy by policy id
      tags:
        - roles-controller
    get:
      description: Get all policies by policy id
      operationId: getPolicy
      parameters:
        - in: path
          name: policyId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PdlPolicy'
          description: Success
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PdlPolicy'
          description: Access denied
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PdlPolicy'
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PdlPolicy'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get all policies by policy id
      summary: Get all policies by policy id
      tags:
        - roles-controller
  /cxunity/authorization/v1/roles:
    get:
      description: Get all roles
      operationId: getRoles
      parameters:
        - in: query
          name: type
          required: false
          schema:
            enum:
              - ootb
              - customized
            type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Role'
                type: array
          description: Success
        "403":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Role'
                type: array
          description: Access denied
        "500":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Role'
                type: array
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get all roles
      summary: Get all roles
      tags:
        - roles-controller
    post:
      description: Create roles
      operationId: createRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role'
          description: Success
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role'
          description: Access denied
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Create roles
      summary: Create roles
      tags:
        - roles-controller
  /cxunity/authorization/v1/roles/{roleId}:
    delete:
      description: Delete roles by roles id
      operationId: deleteRole
      parameters:
        - in: path
          name: roleId
          required: true
          schema:
            type: string
      responses:
        "204":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Role'
                type: array
          description: Success
        "403":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Role'
                type: array
          description: Access denied
        "404":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Role'
                type: array
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Role'
                type: array
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Delete roles by roles id
      summary: Delete roles by roles id
      tags:
        - roles-controller
    get:
      description: Get all role by role id
      operationId: getRole
      parameters:
        - in: path
          name: roleId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role'
          description: Success
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role'
          description: Access denied
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role'
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get all role by role id
      summary: Get all role by role id
      tags:
        - roles-controller
    put:
      description: Update roles by roles id
      operationId: updateRole
      parameters:
        - in: path
          name: roleId
          required: true
          schema:
            type: string
      responses:
        "201":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Role'
                type: array
          description: Success
        "403":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Role'
                type: array
          description: Access denied
        "404":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Role'
                type: array
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Role'
                type: array
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Update roles by roles id
      summary: Update roles by roles id
      tags:
        - roles-controller
  /cxunity/authorization/v1/roles/{roleId}/users:
    get:
      description: Get all role users
      operationId: getRoleUsers
      parameters:
        - in: path
          name: roleId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  type: string
                type: array
          description: Success
        "403":
          content:
            '*/*':
              schema:
                items:
                  type: string
                type: array
          description: Access denied
        "404":
          content:
            '*/*':
              schema:
                items:
                  type: string
                type: array
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                items:
                  type: string
                type: array
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get all role users
      summary: Get all role users
      tags:
        - roles-controller
  /cxunity/authorization/v1/users:
    get:
      description: Get all users
      operationId: getUsers
      responses:
        "204":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/UserAndRoles'
                type: array
          description: Success
        "403":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/UserAndRoles'
                type: array
          description: Access denied
        "500":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/UserAndRoles'
                type: array
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get all users
      summary: Get all users
      tags:
        - roles-controller
  /cxunity/authorization/v1/users/{userId}:
    delete:
      description: Delete user by used id
      operationId: deleteUser
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "204":
          content:
            '*/*':
              schema:
                type: boolean
          description: Success
        "403":
          content:
            '*/*':
              schema:
                type: boolean
          description: Access denied
        "404":
          content:
            '*/*':
              schema:
                type: boolean
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                type: boolean
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Delete user by used id
      summary: Delete user by used id
      tags:
        - roles-controller
    put:
      description: Update user by used id
      operationId: assignDefaultRoleToUser
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "201":
          content:
            '*/*':
              schema:
                type: boolean
          description: Success
        "403":
          content:
            '*/*':
              schema:
                type: boolean
          description: Access denied
        "404":
          content:
            '*/*':
              schema:
                type: boolean
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                type: boolean
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Update user by used id
      summary: Update user by used id
      tags:
        - roles-controller
  /cxunity/authorization/v1/users/{userId}/policies:
    get:
      description: Get all policies for particular user
      operationId: getUsersPolicies
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/PdlPolicy'
                type: array
          description: Success
        "403":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/PdlPolicy'
                type: array
          description: Access denied
        "404":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/PdlPolicy'
                type: array
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/PdlPolicy'
                type: array
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get all policies for particular user
      summary: Get all policies for particular user
      tags:
        - roles-controller
  /cxunity/authorization/v1/users/{userId}/roles:
    get:
      description: Get all roles for particular user
      operationId: getUsersRoles
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  type: string
                type: array
          description: Success
        "403":
          content:
            '*/*':
              schema:
                items:
                  type: string
                type: array
          description: Access denied
        "404":
          content:
            '*/*':
              schema:
                items:
                  type: string
                type: array
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                items:
                  type: string
                type: array
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get all roles for particular user
      summary: Get all roles for particular user
      tags:
        - roles-controller
  /cxunity/authorization/v1/users/{userId}/roles/{roleId}:
    delete:
      description: Delete roles by used id and roles id
      operationId: revokeRoleFromUser
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: roleId
          required: true
          schema:
            type: string
      responses:
        "204":
          content:
            '*/*':
              schema:
                type: boolean
          description: Success
        "403":
          content:
            '*/*':
              schema:
                type: boolean
          description: Access denied
        "404":
          content:
            '*/*':
              schema:
                type: boolean
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                type: boolean
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Delete roles by used id and roles id
      summary: Delete roles by used id and roles id
      tags:
        - roles-controller
    put:
      description: Get roles by used id and roles id
      operationId: assignRoleToUser
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: roleId
          required: true
          schema:
            type: string
      responses:
        "201":
          content:
            '*/*':
              schema:
                type: boolean
          description: Success
        "403":
          content:
            '*/*':
              schema:
                type: boolean
          description: Access denied
        "404":
          content:
            '*/*':
              schema:
                type: boolean
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                type: boolean
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get roles by used id and roles id
      summary: Update roles by used id and roles id
      tags:
        - roles-controller
  /cxunity/packaging/v1/features:
    get:
      description: Get all enabled features for the tenant
      operationId: getFeatures
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Success
        "204":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: object
                type: object
          description: No Content
        "400":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: object
                type: object
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: object
                type: object
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: object
                type: object
          description: Resource Not Found
        "405":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: object
                type: object
          description: Method Not Supported
        "412":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: object
                type: object
          description: Precondition Not Met
        "500":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: object
                type: object
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: object
                type: object
          description: Service Unavailable
      summary: Method to Get all enabled features
      tags:
        - feature-controller
  /cxunity/infrastructure/scim/v1/Users:
    get:
      description: Get user details for particular tenant and user id
      operationId: show
      parameters:
        - in: query
          name: count
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListResponseUserResource'
          description: Success
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListResponseUserResource'
          description: Access denied
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListResponseUserResource'
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListResponseUserResource'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get user details for particular tenant and user id
      summary: Get user details for particular tenant and user id
      tags:
        - scim-user-controller-dp
    post:
      description: Create user for particular tenant
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserResource'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserResource'
          description: Success
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserResource'
          description: Access denied
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserResource'
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserResource'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Create user for particular tenant
      summary: Create user for particular tenant
      tags:
        - scim-user-controller-dp
  /cxunity/infrastructure/scim/v1/Users/{userId}:
    delete:
      description: Delete user for particular tenant
      operationId: delete
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Success
        "403":
          description: Access denied
        "404":
          description: Not found
        "500":
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Delete user for particular tenant
      summary: Delete user for particular tenant
      tags:
        - scim-user-controller-dp
    get:
      description: Update user based on tenant id
      operationId: update_1
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserResource'
          description: Success
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserResource'
          description: Access denied
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserResource'
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserResource'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Update user based on tenant id
      summary: Update user based on tenant id
      tags:
        - scim-user-controller-dp
    put:
      description: Update user based on tenant id
      operationId: update
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserResource'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserResource'
          description: Success
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserResource'
          description: Access denied
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserResource'
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserResource'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Update user based on tenant id
      summary: Update user based on tenant id
      tags:
        - scim-user-controller-dp
  /cxunity/infrastructure/v1/forceSyncUsers:
    post:
      operationId: createForceSyncUser
      parameters:
        - in: query
          name: role
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForceSyncUserRequest'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ForceSyncUserResponse'
          description: Created
      tags:
        - user-controller-dp
  /cxunity/infrastructure/v1/me:
    get:
      description: Who am I or get user details
      operationId: whoAmI
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Me'
          description: Success
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Me'
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Me'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Who am I or get user details
      summary: Who am I or get user details
      tags:
        - me-controller-dp
  /cxunity/infrastructure/v1/me/parsed-policies:
    get:
      description: Get my parsed-policies
      operationId: getMyParsedPolicies
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceParsedPdlPolicy'
          description: Success
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceParsedPdlPolicy'
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceParsedPdlPolicy'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get my parsed-policies
      summary: Get my parsed-policies
      tags:
        - me-controller-dp
  /cxunity/infrastructure/v1/me/permissions:
    get:
      description: Get my permission
      operationId: whatCanIDo
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceServicePermissions'
          description: Success
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceServicePermissions'
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceServicePermissions'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get my permission
      summary: Get my permission
      tags:
        - me-controller-dp
  /cxunity/infrastructure/v1/me/policies:
    get:
      description: Get my policies
      operationId: getMyPolicies
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceString'
          description: Success
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceString'
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceString'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get my policies
      summary: Get my policies
      tags:
        - me-controller-dp
  /cxunity/infrastructure/v1/me/roles:
    get:
      description: Get user roles
      operationId: getUserRoles
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceServiceRolesDto'
          description: Success
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceServiceRolesDto'
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceServiceRolesDto'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get user roles
      summary: Get user roles
      tags:
        - me-controller-dp
  /cxunity/infrastructure/v1/ootb-policies:
    get:
      description: Get all ootb-policies
      operationId: getOotbPolicies
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  type: string
                type: array
          description: Success
        "403":
          content:
            '*/*':
              schema:
                items:
                  type: string
                type: array
          description: Access denied
        "404":
          content:
            '*/*':
              schema:
                items:
                  type: string
                type: array
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                items:
                  type: string
                type: array
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get all ootb-policies
      summary: Get all ootb-policies
      tags:
        - user-controller-dp
  /cxunity/infrastructure/v1/ootb-roles:
    get:
      description: Get all ootb-roles
      operationId: getOotbRoles
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Role'
                type: array
          description: Success
        "403":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Role'
                type: array
          description: Access denied
        "404":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Role'
                type: array
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Role'
                type: array
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get all ootb-roles
      summary: Get all ootb-roles
      tags:
        - user-controller-dp
  /cxunity/infrastructure/v1/users:
    get:
      description: Get all users
      operationId: getAllUsers
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceUserDto'
          description: Success
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceUserDto'
          description: Access denied
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceUserDto'
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceUserDto'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get all users
      summary: Get all users
      tags:
        - user-controller-dp
  /cxunity/infrastructure/v1/users/{id}:
    get:
      description: Get user by user id
      operationId: getUserById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDto'
          description: Success
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDto'
          description: Access denied
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDto'
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDto'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get user by user id
      summary: Get user by user id
      tags:
        - user-controller-dp
  /cxunity/infrastructure/v1/users/{id}/roles:
    put:
      operationId: assignOrRevokeRolesToUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: boolean
              type: object
        required: true
      responses:
        "204":
          description: No Content
      tags:
        - user-controller-dp
  /cxunity/infrastructure/v1/usersproperties:
    get:
      description: Get user properties
      operationId: getUsersProperties
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceUserPropertyDto'
          description: Success
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceUserPropertyDto'
          description: Access denied
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceUserPropertyDto'
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceUserPropertyDto'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get user properties
      summary: Get user properties
      tags:
        - user-controller-dp
  /cxunity/notifications/v1/notifications:
    get:
      description: Get list of Notifications
      operationId: getAll
      parameters:
        - in: query
          name: mcpsTenantId
          required: false
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceNotification'
          description: Success
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceNotification'
          description: Not Found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceNotification'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: List of Notifications
      summary: Get Notifications
      tags:
        - notification-controller
    post:
      description: Create Notification
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationCreateDto'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Notification'
          description: Created
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Notification'
          description: Unauthorized
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Notification'
          description: Forbidden
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Notification'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Create the Notification
      summary: Create Notification
      tags:
        - notification-controller
  /cxunity/notifications/v1/notifications/{id}:
    get:
      description: Get the Notification
      operationId: get
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Notification'
          description: Success
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Notification'
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Notification'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get the Notification
      summary: Get Notification
      tags:
        - notification-controller
    put:
      description: Update the Notification
      operationId: update
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Notification'
          description: Success
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Notification'
          description: Unauthorized
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Notification'
          description: Forbidden
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Notification'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Update the Notification
      summary: Update Notification
      tags:
        - notification-controller
  /cxunity/notifications/v1/notifications/{notificationId}/events:
    get:
      description: Get list of Notification events
      operationId: getAll_1
      parameters:
        - in: path
          name: notificationId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceNotificationEvent'
          description: Success
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceNotificationEvent'
          description: Not Found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceNotificationEvent'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: List of Notification events
      summary: Get Notification events
      tags:
        - notification-event-controller
    post:
      description: Create Notification event
      operationId: create_1
      parameters:
        - in: path
          name: notificationId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationEventDto'
        required: true
      responses:
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Create the Notification event
      summary: Create Notification event
      tags:
        - notification-event-controller
  /cxunity/notifications/v1/notifications/{notificationId}/events/{eventId}:
    get:
      description: Get the Notification event
      operationId: get_1
      parameters:
        - in: path
          name: notificationId
          required: true
          schema:
            type: string
        - in: path
          name: eventId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NotificationEvent'
          description: Success
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NotificationEvent'
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NotificationEvent'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get the Notification event
      summary: Get Notification event
      tags:
        - notification-event-controller
  /cxunity/notifications/v1/notifications/{notificationId}/recipients:
    get:
      description: Get the recipients
      operationId: index
      parameters:
        - in: path
          name: notificationId
          required: true
          schema:
            type: string
        - in: query
          name: all
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceRecipient'
          description: Success
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceRecipient'
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceRecipient'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get the list of recipients for particular notificationId
      summary: Get Recipients
      tags:
        - recipient-controller
    post:
      description: Create Recipient for particular notificationId
      operationId: create_2
      parameters:
        - in: path
          name: notificationId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipient'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Recipient'
          description: Created
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Recipient'
          description: Unauthorized
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Recipient'
          description: Forbidden
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Recipient'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Create Recipient
      summary: Create Recipient
      tags:
        - recipient-controller
  /cxunity/notifications/v1/notifications/{notificationId}/recipients/{id}:
    delete:
      description: Delete the Recipient
      operationId: deactivate
      parameters:
        - in: path
          name: notificationId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Delete the Recipient
      summary: Delete Recipient
      tags:
        - recipient-controller
    get:
      description: Get the Recipient
      operationId: show
      parameters:
        - in: path
          name: notificationId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Recipient'
          description: Success
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Recipient'
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Recipient'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get the Recipient for particular notificationId
      summary: Get Recipient
      tags:
        - recipient-controller
    put:
      description: Update the Recipient
      operationId: update_1
      parameters:
        - in: path
          name: notificationId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipient'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Recipient'
          description: Success
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Recipient'
          description: Unauthorized
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Recipient'
          description: Forbidden
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Recipient'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Update the Recipient
      summary: Update Recipient
      tags:
        - recipient-controller
  /cxunity/notifications/v1/notificationtypes:
    get:
      description: Get list of Notification types
      operationId: getAllTypes
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceNotificationType'
          description: Success
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceNotificationType'
          description: Not Found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourceNotificationType'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: List of Notification types
      summary: Get Notification types
      tags:
        - notification-type-controller
  /cxunity/notifications/v1/notificationtypes/{typeId}:
    get:
      description: Get the Notification type
      operationId: getType
      parameters:
        - in: path
          name: typeId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NotificationType'
          description: Success
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NotificationType'
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NotificationType'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get the Notification type
      summary: Get Notification type
      tags:
        - notification-type-controller
  /cxunity/preferences/v1/users/{userId}/preferences:
    get:
      description: Get the preferences
      operationId: index
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourcePreference'
          description: Success
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourcePreference'
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CollectionResourcePreference'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get the list of preferences for particular user
      summary: Get preferences
      tags:
        - preference-controller
    post:
      description: Create preferences for particular user
      operationId: create
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Preference'
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Preference'
          description: Created
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Preference'
          description: Unauthorized
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Preference'
          description: Forbidden
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Preference'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Create preferences
      summary: Create preferences
      tags:
        - preference-controller
  /cxunity/preferences/v1/users/{userId}/preferences/{id}:
    delete:
      description: Delete the preference
      operationId: delete
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Delete the preference
      summary: Delete preference
      tags:
        - preference-controller
    get:
      description: Get the preference
      operationId: show
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Preference'
          description: Success
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Preference'
          description: Not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Preference'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Get the preference for particular user
      summary: Get preference
      tags:
        - preference-controller
    put:
      description: Update the preference
      operationId: update
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Preference'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Preference'
          description: Success
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Preference'
          description: Unauthorized
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Preference'
          description: Forbidden
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Preference'
          description: Server Error
        default:
          content:
            '*/*': {}
          description: Update the preference
      summary: Update preference
      tags:
        - preference-controller
  /cxunity/provisioning/v1/im:
    post:
      operationId: postRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImRequestDto'
        required: true
      responses:
        "202":
          content:
            application/vnd.com.oracle.oracloud.provisioning.Status+json:
              schema:
                $ref: '#/components/schemas/ImStatusDto'
          description: Accepted
      tags:
        - im-controller
  /cxunity/provisioning/v1/im/**:
    delete:
      operationId: logRequestWithoutBody
      responses:
        "200":
          description: OK
      tags:
        - im-controller
    get:
      operationId: logRequestWithoutBody_1
      responses:
        "200":
          description: OK
      tags:
        - im-controller
    post:
      operationId: logRequest
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
      tags:
        - im-controller
    put:
      operationId: logRequest_1
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
      tags:
        - im-controller
  /cxunity/provisioning/v1/im/request/{id}:
    get:
      operationId: getRequest
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/vnd.com.oracle.oracloud.provisioning.ServiceInstance+json:
              schema:
                $ref: '#/components/schemas/ImRequestDto'
          description: OK
      tags:
        - im-controller
  /cxunity/provisioning/v1/im/requestStatus/{id}:
    get:
      operationId: getStatus
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/vnd.com.oracle.oracloud.provisioning.Status+json:
              schema:
                $ref: '#/components/schemas/ImStatusDto'
          description: OK
      tags:
        - im-controller
  /cxunity/provisioning/v1/im/requeststatus/{id}:
    get:
      operationId: getStatus_1
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/vnd.com.oracle.oracloud.provisioning.Status+json:
              schema:
                $ref: '#/components/schemas/ImStatusDto'
          description: OK
      tags:
        - im-controller
components:
  schemas:
    ArtifactSummary:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        scope:
          type: string
    ArtifactInfo:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        scope:
          type: string
        classes:
          type: string
        parents:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string
    AdminAPIReponse:
      type: object
      properties:
        message:
          type: string
        auditId:
          type: string
    OperationStatusResponse:
      type: object
      properties:
        operationStatus:
          type: string
        additionalInfo:
          type: object
          additionalProperties:
            type: string
    RunMetric:
      type: object
      properties:
        metricName:
          type: string
        metricValue:
          type: integer
          format: int64
    RunRecord:
      type: object
      properties:
        runId:
          type: string
        startTs:
          type: integer
          format: int64
        endTs:
          type: integer
          format: int64
        status:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/RunMetric'
        auditEntries:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowAudit'
    WorkflowAudit:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        versionTS:
          type: string
          format: date-time
        message:
          type: string
        workflowId:
          type: string
        identifier:
          type: string
        runId:
          type: string
        severity:
          type: string
          enum:
            - INFO
            - ERROR
        details:
          type: string
        entries:
          type: array
          items:
            type: string
        recordTimestamp:
          type: integer
          format: int64
        recordWorkflowTimestamp:
          type: integer
          format: int64
    JobError:
      type: object
      properties:
        errorId:
          type: string
        entity:
          type: string
        errorStage:
          type: string
        errorCode:
          type: string
        errorMessage:
          type: string
        inputRecord:
          type: string
    JobSummary:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        versionTS:
          type: string
          format: date-time
        jobType:
          type: string
          enum:
            - EXPORT
            - INGEST
            - DW
            - PUBLISH
            - ANALYTICS
            - QUERYEXPORT
            - SOURCESCHEMADETECT
            - CAMPAIGN
            - IDGRAPH
        jobId:
          type: string
        runId:
          type: string
        jobName:
          type: string
        status:
          type: string
        startTs:
          type: integer
          format: int64
        endTs:
          type: integer
          format: int64
        startedBy:
          type: string
    FilterCriteria:
      type: object
      properties:
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/FilterCriterion'
    FilterCriterion:
      type: object
      properties:
        operator:
          type: string
          enum:
            - AND
            - OR
            - EQUALS
            - NOT_EQUALS
            - BETWEEN
            - CONTAINS
            - NOT_CONTAINS
            - IN
            - NOT_IN
            - GREATER_THAN
            - GREATER_EQUAL_THAN
            - LESS_THAN
            - LESS_EQUAL_THAN
            - NULL
            - NOT_NULL
            - MINUS
            - ADD
            - LIKE
        attribute:
          type: string
        value:
          type: object
    Column:
      type: object
      properties:
        name:
          type: string
        schemaType:
          type: string
        tenantId:
          type: integer
          format: int32
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        type:
          $ref: '#/components/schemas/ColumnType'
        length:
          type: integer
          format: int32
        defaultValue:
          type: string
        tableId:
          type: string
        fieldId:
          type: string
        systemAttribute:
          type: boolean
        groupId:
          type: string
        required:
          type: boolean
    SourceDetectResponse:
      type: object
      properties:
        status:
          type: string
        sourceObjects:
          type: array
          items:
            $ref: '#/components/schemas/SourceObject'
        details:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowAudit'
    SourceObject:
      type: object
      properties:
        objectName:
          type: string
        schema:
          type: array
          items:
            $ref: '#/components/schemas/Column'
        objects:
          type: array
          items:
            type: array
            items:
              type: string
    SourceDetectStatusReponse:
      type: object
      properties:
        created:
          type: integer
          format: int64
        instanceId:
          type: string
        handle:
          type: string
    SourceDetectCall:
      type: object
      properties:
        instanceId:
          type: string
        instance:
          $ref: '#/components/schemas/SourceInstance'
    SourceInstance:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        componentDefinitionId:
          type: string
        uniqueInstanceId:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
    TenantProvisionCall:
      type: object
      properties:
        truncateDW:
          type: boolean
        truncateCube:
          type: boolean
    EncryptionKeySettings:
      type: object
      properties:
        material:
          type: array
          items:
            type: string
            format: byte
        skipEncryption:
          type: boolean
        keyLength:
          type: integer
          format: int32
    TenantPublishCall:
      type: object
      properties:
        components:
          uniqueItems: true
          type: array
          items:
            type: string
        encryptionKeySettings:
          $ref: '#/components/schemas/EncryptionKeySettings'
    HeaderColumn:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
    QueryResult:
      type: object
      properties:
        header:
          type: array
          items:
            $ref: '#/components/schemas/HeaderColumn'
        data:
          type: array
          items:
            type: array
            items:
              type: object
    AttributeValue:
      required:
        - atype
      type: object
      properties:
        alias:
          type: string
        atype:
          type: string
      discriminator:
        propertyName: atype
    JoinCondition:
      type: object
      properties:
        left:
          $ref: '#/components/schemas/ReferenceAttribute'
        right:
          $ref: '#/components/schemas/ReferenceAttribute'
    MCPSQuery:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
          description: Tenant Id
        name:
          type: string
          description: Name of the query
        versionTS:
          type: string
          format: date-time
          description: Version time stamp
        description:
          type: string
          description: Description for the query
        active:
          type: boolean
          description: Active true/false
        lastModifiedBy:
          type: string
          description: Last modified by
        createdBy:
          type: string
          description: Created by
        createdTS:
          type: string
          format: date-time
          description: created time stamp
        uniqueId:
          type: string
          description: A unique id for the object
        operation:
          $ref: '#/components/schemas/SetOperation'
        type:
          type: string
          enum:
            - DW
            - CUBE
    ReferenceAttribute:
      type: object
      properties:
        tableName:
          type: string
          description: Name of the table
        attributeName:
          type: string
          description: Name of the column or alias being referenced
        alias:
          type: string
          description: A name that this attribute will be known by and can be used by others
    SetOperand:
      required:
        - ctype
      type: object
      properties:
        name:
          type: string
        distinct:
          type: boolean
        outputAttributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeValue'
        ctype:
          type: string
      discriminator:
        propertyName: ctype
    SetOperation:
      type: object
      properties:
        name:
          type: string
          description: Name for this operation
        tenantId:
          type: integer
          format: int32
        uniqueId:
          type: string
        operands:
          type: array
          items:
            $ref: '#/components/schemas/SetOperand'
        operator:
          type: string
          description: UNION (Union of the 2 operands), INTERSECTION (intersection of 2 operands) or EXCLUSION (subtract the second operand from the first)
          enum:
            - UNION
            - INTERSECTION
            - EXCLUSION
        distinct:
          type: boolean
          description: Whether or not the output of this query should return only distinct instances
        outputAttributes:
          type: array
          description: The attributes to return from this SetOperation
          items:
            $ref: '#/components/schemas/AttributeValue'
        joinConditions:
          type: array
          description: Pairs of 2 ReferenceAttributes to join the 2 operands
          items:
            $ref: '#/components/schemas/JoinCondition'
    CriteriaOperand:
      required:
        - ctype
      type: object
      properties:
        ctype:
          type: string
      discriminator:
        propertyName: ctype
    MCPSQueryIdRequest:
      type: object
      properties:
        uniqueId:
          type: string
          description: Unique id of the query
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
    Parameter:
      type: object
      properties:
        identifier:
          type: string
        type:
          type: string
          enum:
            - TIMESTAMP
            - STRING
            - NUMBER
        data:
          $ref: '#/components/schemas/CriteriaOperand'
        description:
          type: string
        name:
          type: string
        displayName:
          type: string
        defaultValue:
          type: string
    Part:
      type: object
      properties:
        recordCount:
          type: integer
          format: int32
        id:
          type: integer
          format: int32
    QueryResults:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
          description: Tenant id
        name:
          type: string
          description: Name of the query
        versionTS:
          type: string
          format: date-time
          description: Version time stamp
        description:
          type: string
          description: Description of the query
        active:
          type: boolean
          description: Active true/false
        lastModifiedBy:
          type: string
          description: Last modifed by
        createdBy:
          type: string
          description: Created by
        createdTS:
          type: string
          format: date-time
          description: Created time stamp
        type:
          type: string
          enum:
            - MCPSQUERY
        status:
          type: string
          description: Running/Error/Sucess
          enum:
            - RUNNING
            - ERROR
            - SUCCESS
        queryId:
          type: string
        executionTS:
          type: string
          format: date-time
          description: Execution time stamp
        recordCount:
          type: integer
          format: int32
        ttl:
          type: integer
          format: int32
        resultTableId:
          type: string
        parts:
          type: array
          items:
            $ref: '#/components/schemas/Part'
    ColumnStatistics:
      type: object
      properties:
        fieldId:
          type: string
        notNullValueCount:
          type: integer
          format: int64
        density:
          type: integer
          format: int32
    TableStatistics:
      type: object
      properties:
        tableId:
          type: string
        rowCount:
          type: integer
          format: int64
        columns:
          type: array
          items:
            $ref: '#/components/schemas/ColumnStatistics'
    IdGraphQueryResult:
      type: object
      properties:
        header:
          type: array
          items:
            $ref: '#/components/schemas/HeaderColumn'
        data:
          type: array
          items:
            type: array
            items:
              type: object
        totalHits:
          type: integer
          format: int64
    BaseDTO:
      type: object
      properties:
        tenantId:
          description: Tenant Id
          type: integer
          format: int32
        name:
          type: string
          description: Attribute name
        versionTS:
          type: string
          description: Version time stamp
          format: date-time
        description:
          type: string
          description: Attribute description
        active:
          type: boolean
          description: Active true/false
        lastModifiedBy:
          type: string
          description: Last modified by
        createdBy:
          type: string
          description: Last created by
        createdTS:
          type: string
          format: date-time
          description: Created time stamp
    AggregatedAttribute:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        tableId:
          type: string
        attributeId:
          type: string
        dataSource:
          $ref: '#/components/schemas/DataSource'
        expression:
          $ref: '#/components/schemas/AttributeValue'
        intervalConfig:
          $ref: '#/components/schemas/IntervalConfig'
    AggregatedTable:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        tableId:
          type: string
        dedupeTargetId:
          type: string
        mainIdentifier:
          type: string
        foreignKeyIds:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        aggregatedAttributes:
          type: array
          items:
            $ref: '#/components/schemas/AggregatedAttribute'
        promotionRules:
          type: array
          items:
            $ref: '#/components/schemas/PromotionRule'
        buckets:
          type: array
          items:
            $ref: '#/components/schemas/Bucketing'
    Bucketing:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        tableId:
          type: string
        bucketingId:
          type: string
        attribute:
          $ref: '#/components/schemas/ReferenceAttribute'
        type:
          type: string
          enum:
            - PERCENTILE
            - VALUE
        configs:
          type: array
          items:
            $ref: '#/components/schemas/BucketingConfig'
    BucketingConfig:
      type: object
      properties:
        lowerBound:
          $ref: '#/components/schemas/RangeAttribute'
        upperBound:
          $ref: '#/components/schemas/RangeAttribute'
        rangeValue:
          $ref: '#/components/schemas/StaticAttribute'
    CubeDataSource:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataSource'
        - type: object
          properties:
            cubeId:
              type: string
            modelId:
              type: string
    DataSource:
      required:
        - type
      type: object
      properties:
        type:
          type: string
      discriminator:
        propertyName: type
    IntervalConfig:
      type: object
      properties:
        refreshInterval:
          type: integer
          format: int64
        defaultValue:
          $ref: '#/components/schemas/StaticAttribute'
        nullStrategy:
          type: string
          enum:
            - NONE
            - CALCULATE
            - DEFAULT_VALUE
    PromotionRule:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        tableId:
          type: string
        ruleId:
          type: string
        atomic:
          type: boolean
        outputAttributes:
          type: array
          items:
            $ref: '#/components/schemas/ReferenceAttribute'
        configs:
          type: array
          items:
            $ref: '#/components/schemas/PromotionRuleConfig'
    PromotionRuleConfig:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        tableId:
          type: string
        ruleId:
          type: string
        configId:
          type: string
        mergeType:
          type: string
          enum:
            - MOST_TRUSTED_VALUE
            - MIN
            - MAX
            - NOT_NULL
            - GROUP_AND_SCORE
        attribute:
          $ref: '#/components/schemas/ReferenceAttribute'
        order:
          type: integer
          format: int32
        score:
          type: integer
          format: int32
        arguments:
          type: object
          additionalProperties:
            type: object
    QueryDataSource:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataSource'
        - type: object
          properties:
            id:
              type: string
    RangeAttribute:
      type: object
      properties:
        data:
          type: object
        type:
          type: string
          enum:
            - INCLUSIVE
            - EXCLUSIVE
    StaticAttribute:
      type: object
      properties:
        data:
          type: object
    AnalyticsSource:
      required:
        - ctype
      type: object
      properties:
        masterIdentifiers:
          type: array
          items:
            $ref: '#/components/schemas/DSVAttribute'
        ctype:
          type: string
      discriminator:
        propertyName: ctype
    DSVAttribute:
      type: object
      properties:
        dsvId:
          type: string
        attributeName:
          type: string
    AttributeGroup:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        tableId:
          type: string
        groupId:
          type: string
    Clustering:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        clusteringId:
          type: string
        sourceTable:
          $ref: '#/components/schemas/MCPSQuery'
        clusteringRules:
          type: array
          items:
            $ref: '#/components/schemas/ClusteringRule'
        dedupeTargetId:
          type: string
        mainIdentifier:
          type: string
    ClusteringRule:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        clusteringId:
          type: string
        clusteringRuleId:
          type: string
        scoreThreshold:
          type: integer
          format: int32
        maxCandidates:
          type: integer
          format: int32
        referenceAttributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeValue'
        phonetics:
          type: string
          enum:
            - SOUNDEX
            - METAPHONE
        clusteringCriteria:
          $ref: '#/components/schemas/Criteria'
        matchingCriteria:
          $ref: '#/components/schemas/MatchingCriteria'
    Criteria:
      type: object
      properties:
        operator:
          type: string
          enum:
            - AND
            - OR
            - EQUALS
            - NOT_EQUALS
            - BETWEEN
            - CONTAINS
            - NOT_CONTAINS
            - IN
            - NOT_IN
            - GREATER_THAN
            - GREATER_EQUAL_THAN
            - LESS_THAN
            - LESS_EQUAL_THAN
            - NULL
            - NOT_NULL
            - MINUS
            - ADD
            - LIKE
        operands:
          type: array
          items:
            $ref: '#/components/schemas/CriteriaOperand'
    MatchingCriteria:
      type: object
      properties:
        operator:
          type: string
          enum:
            - AND
            - OR
        operands:
          type: array
          items:
            $ref: '#/components/schemas/MatchingCriteriaOperand'
    MatchingCriteriaOperand:
      type: object
    DWMappingScript:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        type:
          type: string
          enum:
            - HIVE
            - SPARK
        script:
          type: string
        disableDefault:
          type: boolean
        order:
          type: integer
          format: int32
        entityName:
          type: string
        scriptId:
          type: string
    DataSourceView:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        dataSourceViewID:
          type: string
        sourceTableQuery:
          $ref: '#/components/schemas/MCPSQuery'
    DedupeTarget:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        dedupeTargetId:
          type: string
        masterColumnId:
          type: string
        entityId:
          type: array
          items:
            type: string
        primaryKey:
          type: string
    EloquaFeeder:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        feederId:
          type: string
        siteId:
          type: string
        installId:
          type: string
        appId:
          type: string
        assetId:
          type: string
        assetName:
          type: string
        userId:
          type: string
        userName:
          type: string
    EloquaFeederCampaignJob:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        id:
          type: string
        feederId:
          type: string
        campaignJobId:
          type: string
        siteId:
          type: string
    EventType:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        type:
          type: string
        target:
          type: string
        relatedObjects:
          type: array
          items:
            $ref: '#/components/schemas/TableInfo'
    TableInfo:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tableId:
          type: string
    IDGraphRule:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        ruleId:
          type: string
        inputDsvId:
          type: string
        mainIdentifier:
          $ref: '#/components/schemas/DSVAttribute'
        dedupeTargetId:
          type: string
        subRules:
          type: array
          items:
            $ref: '#/components/schemas/IDGraphSubRule'
    IDGraphSubRule:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        ruleId:
          type: string
        subRuleId:
          type: string
        masterEntity:
          type: boolean
        inputDsvId:
          type: string
        orderedField:
          $ref: '#/components/schemas/DSVAttribute'
        identifier:
          $ref: '#/components/schemas/DSVAttribute'
        subIdentifier:
          $ref: '#/components/schemas/DSVAttribute'
        maxRecords:
          type: integer
          format: int32
    ArrayTransform:
      type: object
      allOf:
        - $ref: '#/components/schemas/MappingColumnTransform'
    ConcatTransform:
      type: object
      allOf:
        - $ref: '#/components/schemas/MappingColumnTransform'
    DateTransform:
      type: object
      allOf:
        - $ref: '#/components/schemas/MappingColumnTransform'
    IngestMappingTemplate:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        sourceDefinitionId:
          type: string
        templateId:
          type: string
        mapping:
          $ref: '#/components/schemas/MappingConfiguration'
    KeyValueMapTransform:
      type: object
      allOf:
        - $ref: '#/components/schemas/MappingColumnTransform'
    MappingColumn:
      type: object
      properties:
        table:
          type: string
        column:
          type: string
    MappingColumnTransform:
      required:
        - transform
      type: object
      properties:
        arguments:
          type: object
          additionalProperties:
            type: string
        transform:
          type: string
      discriminator:
        propertyName: transform
    MappingConfiguration:
      type: object
      properties:
        mapping:
          type: object
          properties:
            empty:
              type: boolean
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/MappingColumn'
        transforms:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MappingColumnTransform'
    RegexTransform:
      type: object
      allOf:
        - $ref: '#/components/schemas/MappingColumnTransform'
    StaticTransform:
      type: object
      allOf:
        - $ref: '#/components/schemas/MappingColumnTransform'
    URLTransform:
      type: object
      allOf:
        - $ref: '#/components/schemas/MappingColumnTransform'
    IngestSource:
      type: object
      properties:
        sourceId:
          type: string
        sourceDefinitionId:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
        mapping:
          $ref: '#/components/schemas/MappingConfiguration'
    IngestWorkflow:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        type:
          type: string
          enum:
            - BATCH
            - STREAM
        version:
          type: string
        engine:
          type: string
          enum:
            - SPARK
            - MR
        configuration:
          type: object
          additionalProperties:
            type: object
        schedule:
          type: string
        workflowId:
          type: string
        steps:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowStep'
        sources:
          type: array
          items:
            $ref: '#/components/schemas/IngestSource'
    WorkflowStep:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        type:
          type: string
          enum:
            - SOURCE
            - TRANSFORM
            - SINK
            - ANALYTICS
            - ACTION
            - POST_ACTION
            - SPARK_ACTION
            - ERROR
        priority:
          type: integer
          format: int32
        group:
          type: integer
          format: int32
        instanceId:
          type: string
        workflowId:
          type: string
        stepId:
          type: string
    Job:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        jobId:
          type: string
        jobData:
          $ref: '#/components/schemas/JobData'
        schedule:
          $ref: '#/components/schemas/Schedule'
          type: string
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/PairNotificationTypeString'
        id:
          type: string
        status:
          type: string
        jobType:
          type: string
        nextRun:
          type: string
          format: date-time
        records:
          type: integer
          format: int64
        duration:
          type: string
        lastModified:
          type: string
          format: date-time
        created:
          type: string
          format: date-time
        lastRun:
          type: string
          format: date-time
        fetchTime:
          type: string
          format: date-time
        version:
          type: string
        engine:
          type: string
        workflowId:
          type: string
        source:
          type: string
        mcpsJobId:
          type: string
    JobData:
      required:
        - ctype
      type: object
      properties:
        templateInfo:
          $ref: '#/components/schemas/TemplateInfo'
        additionalInfo:
          type: object
          additionalProperties:
            type: string
        ctype:
          type: string
        ttlInSeconds:
          type: integer
          format: int64
        mcpsQueryId:
          type: string
        mcpsQuery:
          type: object
          additionalProperties:
            type: object
        mapping:
          type: object
          additionalProperties:
            type: object
      discriminator:
        propertyName: ctype
    PairNotificationTypeString:
      type: object
      properties:
        left:
          type: string
          enum:
            - HTTP
        right:
          type: string
    PairTypeString:
      type: object
      properties:
        left:
          type: string
          enum:
            - SOURCE
            - TRANSFORM
            - SINK
            - ANALYTICS
            - ACTION
            - POST_ACTION
            - SPARK_ACTION
            - ERROR
        right:
          type: string
    Schedule:
      type: object
      properties:
        cronExpression:
          type: string
        frequencyType:
          type: string
          enum:
            - MINUTES
            - HOURS
            - DAYS
            - MONTHS
            - ONCE
            - WEEKLY
        frequency:
          type: integer
          format: int32
        timeOfDay:
          type: string
        daysOfWeek:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int32
        daysOfMonth:
          uniqueItems: true
          type: array
          items:
            type: string
        onceDate:
          type: string
          format: date-time
    TemplateInfo:
      type: object
      properties:
        workflowComponents:
          type: array
          items:
            $ref: '#/components/schemas/PairTypeString'
        workflowComponentConfig:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    Lookup:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        tableId:
          type: string
        fieldId:
          type: string
        type:
          type: string
          enum:
            - DW
            - CUBE
        dataSourceViewID:
          type: string
        dataSourceViewColumn:
          type: string
    AggregationSetting:
      type: object
      properties:
        maxDimensions:
          type: integer
          format: int32
        hierarchies:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/DSVAttribute'
        grouped:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/DSVAttribute'
        required:
          type: array
          items:
            $ref: '#/components/schemas/DSVAttribute'
        attributeList:
          type: array
          items:
            $ref: '#/components/schemas/DSVAttribute'
    Cube:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        cubeId:
          type: string
        modelId:
          type: string
        state:
          type: string
          enum:
            - ACTIVE
            - PAUSED
            - DELETED
        status:
          type: string
          enum:
            - NEW
            - READY
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/Dimension'
        measures:
          type: array
          items:
            $ref: '#/components/schemas/Measure'
        dedupeTargetId:
          type: string
        masterIdentifiers:
          type: array
          items:
            $ref: '#/components/schemas/DSVAttribute'
        config:
          type: object
          additionalProperties:
            type: string
        aggregationSettings:
          type: array
          items:
            $ref: '#/components/schemas/AggregationSetting'
    Dimension:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        dimensionId:
          type: string
        cubeId:
          type: string
        sourceAttribute:
          $ref: '#/components/schemas/DSVAttribute'
        shardByColumn:
          type: boolean
    Measure:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        measureId:
          type: string
        cubeId:
          type: string
        operation:
          type: string
          enum:
            - SUM
            - MIN
            - MAX
            - COUNT
            - TOP
            - COUNT_DISTINCT
            - LAST_X_COUNT_DISTINCT
            - LAST_X_SUM
        type:
          type: string
          enum:
            - REFERENCE
            - STATIC
        sourceAttribute:
          $ref: '#/components/schemas/AttributeValue'
        groupByAttributes:
          type: array
          items:
            $ref: '#/components/schemas/DSVAttribute'
        sortedAttributes:
          type: array
          items:
            $ref: '#/components/schemas/SortedAttribute'
        properties:
          type: object
          additionalProperties:
            type: string
        extraColumns:
          uniqueItems: true
          type: array
          items:
            type: string
    Model:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        modelId:
          type: string
        type:
          type: string
          enum:
            - DATA_WRANGLING
            - CUSTOMER_ANALYTICS
            - REPORTING_ANALYTICS
        dataSourceViewId:
          type: string
        cube:
          $ref: '#/components/schemas/Cube'
        incrementalField:
          $ref: '#/components/schemas/DSVAttribute'
        incrementalFieldFormat:
          type: string
    SortedAttribute:
      type: object
      properties:
        order:
          type: string
          enum:
            - ASC
            - DESC
        attribute:
          $ref: '#/components/schemas/AttributeValue'
    Notification:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        id:
          type: string
        conditions:
          uniqueItems: true
          type: array
          items:
            type: string
        data:
          $ref: '#/components/schemas/NotificationData'
        createdOn:
          format: date-time
          type: string
        cxunityTenantId:
          type: string
        lastModifiedOn:
          format: date-time
          type: string
        links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
        mcpsTenantId:
          format: int64
          type: integer
        mcpsTenantKey:
          type: string
        medium:
          enum:
            - EMAIL
            - SMS
          type: string
        notificationType:
          type: string
        onlyOnFailure:
          type: boolean
        tenantHostName:
          type: string
      required:
        - createdBy
        - createdOn
        - cxunityTenantId
        - lastModifiedBy
        - mcpsTenantId
        - mcpsTenantKey
        - medium
        - tenantHostName
    NotificationData:
      required:
        - ctype
      type: object
      properties:
        additionalInfo:
          type: object
          additionalProperties:
            type: string
        ctype:
          type: string
      discriminator:
        propertyName: ctype
    ObjectJoin:
      type: object
      properties:
        type:
          type: string
          enum:
            - JOIN
            - FULL OUTER JOIN
            - RIGHT OUTER JOIN
            - LEFT OUTER JOIN
        condition:
          type: array
          items:
            $ref: '#/components/schemas/JoinCondition'
        targetSet:
          $ref: '#/components/schemas/ObjectSet'
    ObjectSet:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        objectName:
          type: string
        uniqueId:
          type: string
        outputAttributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeValue'
        distinct:
          type: boolean
        criteria:
          $ref: '#/components/schemas/Criteria'
        havings:
          $ref: '#/components/schemas/Criteria'
        groupBy:
          type: array
          items:
            $ref: '#/components/schemas/AttributeValue'
        sortBy:
          type: array
          items:
            $ref: '#/components/schemas/SortedAttribute'
        occurrence:
          $ref: '#/components/schemas/Occurrence'
        objectJoin:
          $ref: '#/components/schemas/ObjectJoin'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
        operand:
          $ref: '#/components/schemas/SetOperand'
    Occurrence:
      type: object
      properties:
        type:
          type: string
          enum:
            - FIRST
            - FOREMOST
            - LATEST
            - LAST
        partitionAttribute:
          $ref: '#/components/schemas/ReferenceAttribute'
        limit:
          type: integer
          format: int32
        count:
          type: integer
          format: int32
        orderAttribute:
          $ref: '#/components/schemas/ReferenceAttribute'
    PostActionDefinition:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        arguments:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
        artifactName:
          type: string
        artifactVersion:
          type: string
        parents:
          type: string
        nameId:
          type: string
    QueryAnalyticsSource:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        queryAnalyticsId:
          type: string
        dataSourceViewId:
          type: string
        masterIdentifiers:
          type: array
          items:
            $ref: '#/components/schemas/DSVAttribute'
        state:
          type: string
          enum:
            - ACTIVE
            - PAUSED
            - DELETED
    SinkDefinition:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        arguments:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
        artifactName:
          type: string
        artifactVersion:
          type: string
        parents:
          type: string
        nameId:
          type: string
    SinkInstance:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        componentDefinitionId:
          type: string
        uniqueInstanceId:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
    SourceDefinition:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        arguments:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
        artifactName:
          type: string
        artifactVersion:
          type: string
        parents:
          type: string
        nameId:
          type: string
    BucketingStrategy:
      type: object
      properties:
        fieldName:
          type: string
        numberOfBuckets:
          type: integer
          format: int32
    ColumnType:
      required:
        - columntype
      type: object
      properties:
        dataType:
          type: string
          enum:
            - STRING
            - VARCHAR
            - CHAR
            - TINYINT
            - SMALLINT
            - INT
            - BIGINT
            - DOUBLE
            - FLOAT
            - DECIMAL
            - TIMESTAMP
            - DATE
            - BOOLEAN
            - BINARY
            - MAP
            - ARRAY
        typeDescription:
          $ref: '#/components/schemas/ColumnTypeDescription'
        columntype:
          type: string
      discriminator:
        propertyName: columntype
    ColumnTypeDescription:
      required:
        - typedesc
      type: object
      properties:
        typedesc:
          type: string
      discriminator:
        propertyName: typedesc
    ForeignKey:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        type:
          type: string
          enum:
            - PARENT
            - CHILD
        sourceAttribute:
          type: string
        sourceColumn:
          type: string
        destinationColumn:
          type: string
        destinationTable:
          type: string
        sourceTableId:
          type: string
        foreignKeyId:
          type: string
    Partition:
      type: object
      properties:
        partitionStrategy:
          type: string
          enum:
            - DATE
            - REFERENCE
        partitionFields:
          type: array
          items:
            $ref: '#/components/schemas/PartitionField'
    PartitionField:
      required:
        - ptype
      type: object
      properties:
        targetFieldName:
          type: string
        referenceField:
          type: string
        ptype:
          type: string
      discriminator:
        propertyName: ptype
    Table:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        bucketingStrategy:
          $ref: '#/components/schemas/BucketingStrategy'
        partitions:
          type: array
          items:
            $ref: '#/components/schemas/Partition'
        foreignKeys:
          type: array
          items:
            $ref: '#/components/schemas/ForeignKey'
        tablePrimaryKey:
          type: string
        sourceAttribute:
          type: string
        scope:
          type: string
          enum:
            - ANALYTICS
            - DW
            - UNSET
        insertOnly:
          type: boolean
        tableId:
          type: string
        categoryId:
          type: string
        resourceName:
          type: string
        columns:
          type: array
          items:
            $ref: '#/components/schemas/Column'
    TenantProperty:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        group:
          type: string
        subgroup:
          type: string
        propertyName:
          type: string
        propertyValue:
          type: string
    TransformInstance:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        componentDefinitionId:
          type: string
        uniqueInstanceId:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
    ValidationInstance:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        instance:
          $ref: '#/components/schemas/PairTypeString'
        entities:
          uniqueItems: true
          type: array
          items:
            type: string
        order:
          type: integer
          format: int32
        jobType:
          type: string
          enum:
            - EXPORT
            - INGEST
            - DW
            - PUBLISH
            - ANALYTICS
            - QUERYEXPORT
            - SOURCESCHEMADETECT
            - CAMPAIGN
            - IDGRAPH
        instanceId:
          type: string
    Workflow:
      type: object
      properties:
        tenantId:
          type: integer
          format: int32
        name:
          type: string
        versionTS:
          type: string
          format: date-time
        description:
          type: string
        active:
          type: boolean
        lastModifiedBy:
          type: string
        createdBy:
          type: string
        createdTS:
          type: string
          format: date-time
        type:
          type: string
          enum:
            - BATCH
            - STREAM
        version:
          type: string
        engine:
          type: string
          enum:
            - SPARK
            - MR
        configuration:
          type: object
          additionalProperties:
            type: object
        schedule:
          type: string
        workflowId:
          type: string
        steps:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowStep'
    Tenant:
      type: object
      properties:
        id:
          type: integer
          format: int32
        accessKey:
          type: string
        parentTenantID:
          type: integer
          format: int32
        displayName:
          type: string
        abbreviation:
          type: string
        lastPublishedTS:
          type: string
          format: date-time
        properties:
          type: object
          additionalProperties:
            type: object
    IngestCallResponse:
      type: object
      properties:
        message:
          type: string
          description: Records written message
        recordCount:
          type: integer
          format: int32
          description: Total record count
    DomainExceptionDetail:
      type: object
      properties:
        type:
          type: string
          format: uri
        instance:
          type: string
          format: uri
        title:
          type: string
        o:errorPath:
          type: string
        o:errorCode:
          type: string
    ErrorResponse:
      type: object
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        detail:
          type: string
        o:errorCode:
          type: string
        o:errorDetails:
          type: array
          items:
            $ref: '#/components/schemas/DomainExceptionDetail'
    DashboardMetadataDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        jsonUri:
          type: string
        htmlUri:
          type: string
        createdBy:
          type: string
        createdOn:
          type: string
          format: date-time
        lastModifiedBy:
          type: string
        lastModifiedOn:
          type: string
          format: date-time
    Link:
      type: object
      properties:
        rel:
          type: string
          xml:
            attribute: true
        href:
          type: string
          xml:
            attribute: true
        hreflang:
          type: string
          xml:
            attribute: true
        media:
          type: string
          xml:
            attribute: true
        title:
          type: string
          xml:
            attribute: true
        type:
          type: string
          xml:
            attribute: true
        deprecation:
          type: string
          xml:
            attribute: true
        profile:
          type: string
        name:
          type: string
    OraclePagedResourcesDashboardMetadataDTO:
      type: object
      properties:
        limit:
          type: integer
          format: int64
          xml:
            attribute: true
        offset:
          type: integer
          format: int64
          xml:
            attribute: true
        count:
          type: integer
          format: int64
          xml:
            attribute: true
        totalResult:
          type: integer
          format: int64
          xml:
            attribute: true
        hasMore:
          type: boolean
          xml:
            attribute: true
        links:
          type: array
          xml:
            name: link
            namespace: http://www.w3.org/2005/Atom
          items:
            $ref: '#/components/schemas/Link'
        items:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/DashboardMetadataDTO'
      xml:
        name: pagedEntities
    BlobsMetadata:
      type: object
      properties:
        id:
          type: string
        value:
          type: array
          items:
            type: string
            format: byte
        etag:
          type: string
        contentSize:
          type: integer
          format: int64
        contentType:
          type: string
        lastModifiedBy:
          type: string
        lastModifiedOn:
          type: string
          format: date-time
        createdBy:
          type: string
        createdOn:
          type: string
          format: date-time
    InputStreamResource:
      type: object
      properties:
        inputStream:
          type: object
        description:
          type: string
        open:
          type: boolean
        file:
          type: string
          format: binary
        filename:
          type: string
        uri:
          type: string
          format: uri
        readable:
          type: boolean
        url:
          type: string
          format: url
    ConnectorsList:
      type: object
      properties:
        id:
          type: string
        targetSystem:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
    ConnectorVersion:
      type: object
      properties:
        id:
          type: string
        jsondata:
          type: string
        version:
          type: integer
          format: int32
        status:
          type: string
        createdOn:
          type: string
          format: date-time
        createdBy:
          type: string
        lastModifiedOn:
          type: string
          format: date-time
        lastModifiedBy:
          type: string
        mcpsTenantId:
          type: string
        cxunityTenantId:
          type: string
    Connectors:
      type: object
      properties:
        id:
          type: string
        targetSystem:
          type: string
        connectionType:
          type: string
        name:
          type: string
        description:
          type: string
        status:
          type: string
        parser:
          type: string
        createdOn:
          type: string
          format: date-time
        createdBy:
          type: string
        lastModifiedOn:
          type: string
          format: date-time
        lastModifiedBy:
          type: string
        mcpsTenantId:
          type: string
        cxunityTenantId:
          type: string
        connectorVersionList:
          type: array
          items:
            $ref: '#/components/schemas/ConnectorVersion'
    CXUDataObject:
      type: object
      properties:
        id:
          type: string
        objectId:
          type: string
        recordCount:
          type: integer
          format: int64
        createdOn:
          type: string
          format: date-time
        lastModifiedOn:
          type: string
          format: date-time
        createdBy:
          type: string
        lastModifiedBy:
          type: string
    DataViewerSearch:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        objectId:
          type: string
        filters:
          type: string
        columns:
          type: string
    EloquaAuthentication:
      type: object
      properties:
        userName:
          type: string
        password:
          type: string
        authType:
          type: string
        authUrl:
          type: string
        httpProxy:
          type: string
        companyName:
          type: string
        httpPort:
          type: integer
          format: int32
    EloquaContactFieldElement:
      type: object
      properties:
        elements:
          type: array
          items:
            $ref: '#/components/schemas/EloquaContactFields'
    EloquaContactFields:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        createdAt:
          type: string
        createdBy:
          type: string
        depth:
          type: string
        updatedAt:
          type: string
        count:
          type: string
        lastUpdatedAt:
          type: string
        orderBy:
          type: string
        page:
          type: string
        search:
          type: string
        pageSize:
          type: string
        updatedBy:
          type: string
    JsonNode:
      type: object
      properties:
        array:
          type: boolean
        null:
          type: boolean
        valueNode:
          type: boolean
        containerNode:
          type: boolean
        missingNode:
          type: boolean
        object:
          type: boolean
        nodeType:
          type: string
          enum:
            - ARRAY
            - BINARY
            - BOOLEAN
            - MISSING
            - NULL
            - NUMBER
            - OBJECT
            - POJO
            - STRING
        pojo:
          type: boolean
        number:
          type: boolean
        integralNumber:
          type: boolean
        floatingPointNumber:
          type: boolean
        short:
          type: boolean
        int:
          type: boolean
        long:
          type: boolean
        double:
          type: boolean
        bigDecimal:
          type: boolean
        bigInteger:
          type: boolean
        textual:
          type: boolean
        boolean:
          type: boolean
        binary:
          type: boolean
        float:
          type: boolean
    Events:
      type: object
      properties:
        tenantId:
          type: string
        name:
          type: string
        description:
          type: string
        active:
          type: boolean
        type:
          type: string
        target:
          type: string
        versionTS:
          type: integer
          format: int64
        createdTS:
          type: integer
          format: int64
        relatedObjects:
          type: array
          items:
            $ref: '#/components/schemas/RelatedObject'
    RelatedObject:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tableId:
          type: string
    McpsForeignKey:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        sourceAttribute:
          type: string
        sourceColumn:
          type: string
        destinationColumn:
          type: string
        destinationTable:
          type: string
        sourceTableId:
          type: string
        foreignKeyId:
          type: string
        active:
          type: string
        isSnapshot:
          type: boolean
        versionTs:
          type: string
          format: date-time
        createdTs:
          type: string
          format: date-time
        tenantId:
          type: integer
          format: int64
    CollectionPresenterMcpsForeignKey:
      type: object
    Attribute:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        dataType:
          type: string
        numberOfValues:
          type: string
        keyType:
          type: string
        columnName:
          type: string
        locked:
          type: string
        groupId:
          type: string
        typeDescription:
          type: string
        isSnapshot:
          type: boolean
        dataObjectName:
          type: string
        linkedTo:
          type: string
        created:
          type: string
          format: date-time
        version:
          type: string
          format: date-time
    ParentChildFKWrapper:
      type: object
      properties:
        parentObjectFK:
          $ref: '#/components/schemas/McpsForeignKey'
        childObjectFK:
          $ref: '#/components/schemas/McpsForeignKey'
        attributesToCreateOnChildObj:
          type: array
          items:
            $ref: '#/components/schemas/Attribute'
    InputParameters:
      type: object
      properties:
        tenantId:
          type: string
        sftpServerName:
          type: string
        notifications:
          type: object
          additionalProperties:
            type: object
        schedule:
          type: string
        authenticationKey:
          type: string
        mcpsQueryId:
          type: string
        taxonomy:
          type: string
        mcpsQuery:
          type: string
        sourceTable:
          type: string
        categories:
          type: array
          items:
            type: string
        refreshInterval:
          type: integer
          format: int32
        folderName:
          type: string
    ThinJob:
      type: object
      properties:
        status:
          type: string
        name:
          type: string
        jobType:
          type: string
        nextRun:
          type: string
        description:
          type: string
        records:
          type: integer
          format: int64
        duration:
          type: string
        lastModified:
          type: string
        lastModifiedTS:
          type: integer
          format: int64
        created:
          type: string
        createdTS:
          type: integer
          format: int64
        source:
          type: string
        sink:
          type: string
        mcpsJobId:
          type: string
        tenantId:
          type: string
        sourceList:
          type: array
          items:
            type: object
            additionalProperties:
              type: object
        sinkList:
          type: array
          items:
            type: object
            additionalProperties:
              type: object
        schedule:
          type: string
        dataObjects:
          uniqueItems: true
          type: array
          items:
            type: string
        mcpsQueryId:
          type: string
        mcpsQuery:
          type: object
          additionalProperties:
            type: object
        ttlInSeconds:
          type: integer
          format: int64
        profileList:
          type: string
        additionalInfo:
          type: object
          additionalProperties:
            type: string
        ttl:
          type: integer
          format: int64
          writeOnly: true
    OraclePagedResourcesThinJob:
      type: object
      properties:
        limit:
          type: integer
          format: int64
          xml:
            attribute: true
        offset:
          type: integer
          format: int64
          xml:
            attribute: true
        count:
          type: integer
          format: int64
          xml:
            attribute: true
        totalResult:
          type: integer
          format: int64
          xml:
            attribute: true
        hasMore:
          type: boolean
          xml:
            attribute: true
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        items:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ThinJob'
    MCPSJobSummary:
      type: object
      properties:
        tenantId:
          type: string
        versionTS:
          type: integer
          format: int64
        jobType:
          type: string
        jobId:
          type: string
        runId:
          type: string
        jobName:
          type: string
        status:
          type: string
        startTs:
          type: integer
          format: int64
        endTs:
          type: integer
          format: int64
        startedBy:
          type: string
    MCPSJobMetadata:
      type: object
      properties:
        tenantId:
          type: string
        name:
          type: string
        versionTS:
          type: integer
          format: int64
        description:
          type: string
        active:
          type: boolean
        createdTS:
          type: integer
          format: int64
        jobId:
          type: string
        jobData:
          $ref: '#/components/schemas/JobData'
        schedule:
          $ref: '#/components/schemas/Schedule'
        createdBy:
          type: string
        lastModifiedBy:
          type: string
    WorkflowComponent:
      type: object
      properties:
        left:
          type: string
        right:
          type: string
    Responsys:
      type: object
      properties:
        authToken:
          type: string
        issuedAt:
          type: string
        endPoint:
          type: string
        user_name:
          type: string
        password:
          type: string
        auth_type:
          type: string
        auth_url:
          type: string
        httpProxy:
          type: string
        httpPort:
          type: integer
          format: int32
    Sink:
      type: object
      properties:
        uniqueInstanceId:
          type: string
        tenantId:
          type: string
        name:
          type: string
        description:
          type: string
        active:
          type: boolean
        componentDefinitionId:
          type: string
        versionTS:
          type: integer
          format: int64
        createdTS:
          type: integer
          format: int64
        parameters:
          $ref: '#/components/schemas/SinkParameters'
        ignoreUniqueInstanceId:
          type: boolean
          writeOnly: true
    SinkParameters:
      type: object
      properties:
        sftpServerName:
          type: string
        pem:
          type: string
        path:
          type: string
        folderName:
          type: string
        fileName:
          type: string
        fileFormat:
          type: string
        fileNameDateFormat:
          type: string
        fileCompressionFormat:
          type: string
        referenceName:
          type: string
        authApiUrl:
          type: string
        authApiUser:
          type: string
        authApiPassword:
          type: string
        siteName:
          type: string
        importApiUri:
          type: string
        eloquaEmailAttribute:
          type: string
        eloquaFieldMapping:
          type: string
        contactFieldIdMapping:
          type: string
        password:
          type: string
        fileNamePattern:
          type: string
        authUser:
          type: string
        authPassword:
          type: string
        instanceUrl:
          type: string
        jsonConfig:
          type: string
        parser:
          type: string
        version:
          type: string
        targetSystem:
          type: string
    SinkBO:
      type: object
      properties:
        uniqueInstanceId:
          type: string
        tenantId:
          type: string
        name:
          type: string
        description:
          type: string
        active:
          type: boolean
        componentDefinitionId:
          type: string
        versionTS:
          type: integer
          format: int64
        createdTS:
          type: integer
          format: int64
        parameters:
          $ref: '#/components/schemas/SinkParameters'
        ignoreUniqueInstanceId:
          type: boolean
          writeOnly: true
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/ThinJob'
        lastExportTS:
          type: integer
          format: int64
        exportJobCount:
          type: integer
          format: int32
        campaignJobCount:
          type: integer
          format: int32
    Parameters:
      type: object
      properties:
        sftpServerName:
          type: string
        pem:
          type: string
        path:
          type: string
        folderName:
          type: string
        fileNamePattern:
          type: string
        fileNamePatternValue:
          type: string
        fileNamePrefix:
          type: string
        fileNameSuffix:
          type: string
        fileNameExtension:
          type: string
        encryptionKey:
          type: string
        encryptionPassPhrase:
          type: string
        delimiter:
          type: string
        charset:
          type: string
        referenceName:
          type: string
        fileCompressionFormat:
          type: string
        csv:
          type: boolean
        password:
          type: string
        fileRegex:
          type: string
        testStrings:
          type: string
        type:
          type: string
        jsonConfig:
          type: string
        parser:
          type: string
        version:
          type: string
        targetSystem:
          type: string
        instanceUrl:
          type: string
        authUser:
          type: string
        authPassword:
          type: string
        siteName:
          type: string
    Source:
      type: object
      properties:
        uniqueInstanceId:
          type: string
        tenantId:
          type: string
        name:
          type: string
        description:
          type: string
        active:
          type: boolean
        componentDefinitionId:
          type: string
        versionTS:
          type: integer
          format: int64
        createdTS:
          type: integer
          format: int64
        parameters:
          $ref: '#/components/schemas/Parameters'
    SourceBO:
      type: object
      properties:
        uniqueInstanceId:
          type: string
        tenantId:
          type: string
        name:
          type: string
        description:
          type: string
        active:
          type: boolean
        componentDefinitionId:
          type: string
        versionTS:
          type: integer
          format: int64
        createdTS:
          type: integer
          format: int64
        parameters:
          $ref: '#/components/schemas/Parameters'
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/ThinJob'
        lastImportTS:
          type: integer
          format: int64
    FeatureModel:
      type: object
      properties:
        mcpsTenantId:
          type: string
        cxunityTenantId:
          type: string
        name:
          type: string
        enabled:
          type: boolean
    CollectionResourceFeatureModel:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/FeatureModel'
        count:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        totalResults:
          type: integer
          format: int32
        hasMore:
          type: boolean
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    ArrayNode:
      type: object
      properties:
        array:
          type: boolean
        nodeType:
          type: string
          enum:
            - ARRAY
            - BINARY
            - BOOLEAN
            - MISSING
            - NULL
            - NUMBER
            - OBJECT
            - POJO
            - STRING
        null:
          type: boolean
        valueNode:
          type: boolean
        containerNode:
          type: boolean
        missingNode:
          type: boolean
        object:
          type: boolean
        pojo:
          type: boolean
        number:
          type: boolean
        integralNumber:
          type: boolean
        floatingPointNumber:
          type: boolean
        short:
          type: boolean
        int:
          type: boolean
        long:
          type: boolean
        double:
          type: boolean
        bigDecimal:
          type: boolean
        bigInteger:
          type: boolean
        textual:
          type: boolean
        boolean:
          type: boolean
        binary:
          type: boolean
        float:
          type: boolean
    PreferenceModel:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    CollectionResourcePreferenceModel:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PreferenceModel'
        count:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        totalResults:
          type: integer
          format: int32
        hasMore:
          type: boolean
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    AttributeGroupsModel:
      type: object
      properties:
        groupId:
          type: string
        name:
          type: string
        description:
          type: string
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/JsonNode'
    DataObjectModel:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        source:
          type: string
        description:
          type: string
        objectId:
          type: string
        tenantId:
          type: integer
          format: int64
        resourceName:
          type: string
        created:
          type: string
          format: date-time
        createdBy:
          type: string
        lastModified:
          type: string
          format: date-time
        lastModifiedBy:
          type: string
        attributeCount:
          type: integer
          format: int32
        linkedObjectCount:
          type: integer
          format: int32
        categoryId:
          type: string
        scope:
          type: string
        active:
          type: boolean
        xrefTable:
          type: boolean
        aggregateGroups:
          type: array
          items:
            $ref: '#/components/schemas/AttributeGroupsModel'
        attributeGroups:
          type: array
          items:
            $ref: '#/components/schemas/AttributeGroupsModel'
        foreignKeys:
          type: array
          items:
            $ref: '#/components/schemas/JsonNode'
    CollectionResourceDataObjectModel:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DataObjectModel'
        count:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        totalResults:
          type: integer
          format: int32
        hasMore:
          type: boolean
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    SegmentModel:
      type: object
      xml:
        name: segment
    OraclePagedResourcesSegmentModel:
      type: object
      properties:
        limit:
          type: integer
          format: int64
          xml:
            attribute: true
        offset:
          type: integer
          format: int64
          xml:
            attribute: true
        count:
          type: integer
          format: int64
          xml:
            attribute: true
        totalResult:
          type: integer
          format: int64
          xml:
            attribute: true
        hasMore:
          type: boolean
          xml:
            attribute: true
        links:
          type: array
          xml:
            name: link
            namespace: http://www.w3.org/2005/Atom
          items:
            $ref: '#/components/schemas/Link'
        items:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/SegmentModel'
      xml:
        name: pagedEntities
    PathObject:
      type: object
      properties:
        label:
          type: string
        tableId:
          type: string
    TenantPreference:
      type: object
      properties:
        id:
          type: string
        mcpsTenantId:
          type: string
        cxunityTenantId:
          type: string
        name:
          type: string
        key:
          type: string
        value:
          type: array
          items:
            $ref: '#/components/schemas/PathObject'
    CollectionResourceTenantPreference:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/TenantPreference'
        count:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        totalResults:
          type: integer
          format: int32
        hasMore:
          type: boolean
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    PdlPolicy:
      properties:
        id:
          type: string
        pdlStr:
          type: string
        type:
          enum:
            - ootb
            - customized
          type: string
      type: object
    Role:
      properties:
        name:
          type: string
        policies:
          items:
            type: string
          type: array
        type:
          enum:
            - ootb
            - customized
          type: string
      type: object
    UserAndRoles:
      properties:
        name:
          type: string
        roles:
          items:
            type: string
          type: array
      type: object
    Address:
      properties:
        country:
          type: string
        formatted:
          type: string
        locality:
          type: string
        postalCode:
          type: string
        primary:
          type: boolean
        region:
          type: string
        streetAddress:
          type: string
        type:
          type: string
      type: object
    CollectionResourceParsedPdlPolicy:
      properties:
        count:
          format: int32
          type: integer
        hasMore:
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/ParsedPdlPolicy'
          type: array
        limit:
          format: int32
          type: integer
        links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
        offset:
          format: int32
          type: integer
        totalResults:
          format: int32
          type: integer
      type: object
    CollectionResourceServicePermissions:
      properties:
        count:
          format: int32
          type: integer
        hasMore:
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/ServicePermissions'
          type: array
        limit:
          format: int32
          type: integer
        links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
        offset:
          format: int32
          type: integer
        totalResults:
          format: int32
          type: integer
      type: object
    CollectionResourceServiceRolesDto:
      properties:
        count:
          format: int32
          type: integer
        hasMore:
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/ServiceRolesDto'
          type: array
        limit:
          format: int32
          type: integer
        links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
        offset:
          format: int32
          type: integer
        totalResults:
          format: int32
          type: integer
      type: object
    CollectionResourceString:
      properties:
        count:
          format: int32
          type: integer
        hasMore:
          type: boolean
        items:
          items:
            type: string
          type: array
        limit:
          format: int32
          type: integer
        links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
        offset:
          format: int32
          type: integer
        totalResults:
          format: int32
          type: integer
      type: object
    CollectionResourceUserDto:
      properties:
        count:
          format: int32
          type: integer
        hasMore:
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/UserDto'
          type: array
        limit:
          format: int32
          type: integer
        links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
        offset:
          format: int32
          type: integer
        totalResults:
          format: int32
          type: integer
      type: object
    CollectionResourceUserPropertyDto:
      properties:
        count:
          format: int32
          type: integer
        hasMore:
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/UserPropertyDto'
          type: array
        limit:
          format: int32
          type: integer
        links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
        offset:
          format: int32
          type: integer
        totalResults:
          format: int32
          type: integer
      type: object
    Email:
      properties:
        display:
          type: string
        primary:
          type: boolean
        type:
          type: string
        value:
          type: string
      type: object
    Entitlement:
      properties:
        display:
          type: string
        primary:
          type: boolean
        type:
          type: string
        value:
          type: string
      type: object
    ForceSyncUserRequest:
      properties:
        clientId:
          type: string
        clientSecret:
          type: string
        idcsurl:
          type: string
      type: object
    ForceSyncUserResponse:
      properties:
        totalNumberOfUser:
          format: int32
          type: integer
        totalSyncUser:
          format: int32
          type: integer
        totalUnSyncUser:
          format: int32
          type: integer
      type: object
    Group:
      properties:
        $ref:
          format: uri
          type: string
        display:
          type: string
        type:
          type: string
        value:
          type: string
      type: object
    InstantMessagingAddress:
      properties:
        display:
          type: string
        primary:
          type: boolean
        type:
          type: string
        value:
          type: string
      type: object
    ListResponseUserResource:
      properties:
        Resources:
          items:
            $ref: '#/components/schemas/UserResource'
          type: array
        externalId:
          type: string
        id:
          type: string
        itemsPerPage:
          format: int32
          type: integer
        meta:
          $ref: '#/components/schemas/Meta'
        schemas:
          items:
            type: string
          type: array
          uniqueItems: true
        startIndex:
          format: int32
          type: integer
        totalResults:
          format: int64
          type: integer
      required:
        - Resources
        - totalResults
      type: object
    Me:
      properties:
        cxunityTenant:
          $ref: '#/components/schemas/MeCxuTenant'
        mcpsTenants:
          items:
            $ref: '#/components/schemas/MeMcpsTenant'
          type: array
        user:
          $ref: '#/components/schemas/MeCxuUser'
      type: object
    MeCxuTenant:
      properties:
        id:
          type: string
        idcsUrl:
          type: string
        name:
          type: string
      type: object
    MeCxuUser:
      properties:
        country:
          type: string
        email:
          type: string
        firstName:
          type: string
        id:
          type: string
        isAdmin:
          type: boolean
        language:
          type: string
        lastName:
          type: string
        timeZone:
          type: string
        userName:
          type: string
      type: object
    MeMcpsTenant:
      properties:
        displayName:
          type: string
        id:
          format: int64
          type: integer
        key:
          type: string
      type: object
    Meta:
      properties:
        created:
          format: date-time
          type: string
        lastModified:
          format: date-time
          type: string
        location:
          format: uri
          type: string
        resourceType:
          type: string
        version:
          type: string
      type: object
    Name:
      properties:
        familyName:
          type: string
        formatted:
          type: string
        givenName:
          type: string
        honorificPrefix:
          type: string
        honorificSuffix:
          type: string
        middleName:
          type: string
      type: object
    ParsedPdlPolicy:
      properties:
        id:
          type: string
        principalId:
          type: string
        principalType:
          enum:
            - user
            - role
          type: string
        resource:
          type: string
        type:
          enum:
            - ootb
            - customized
          type: string
        valid:
          type: boolean
        verb:
          enum:
            - inspect
            - read
            - use
            - manage
          type: string
      type: object
    Permission:
      properties:
        actions:
          items:
            type: string
          type: array
        resource:
          type: string
        resourceExpression:
          type: string
      type: object
    PhoneNumber:
      properties:
        display:
          type: string
        primary:
          type: boolean
        type:
          type: string
        value:
          type: string
      type: object
    Photo:
      properties:
        display:
          type: string
        primary:
          type: boolean
        type:
          type: string
        value:
          format: uri
          type: string
      type: object
    ServicePermissions:
      properties:
        permissions:
          items:
            $ref: '#/components/schemas/Permission'
          type: array
        service:
          type: string
      type: object
    ServiceRolesDto:
      properties:
        roles:
          items:
            type: string
          type: array
        service:
          type: string
      type: object
    SingleResourceDelegate:
      properties:
        links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      type: object
    UserDto:
      properties:
        active:
          type: boolean
        delegate:
          $ref: '#/components/schemas/SingleResourceDelegate'
        email:
          type: string
        firstName:
          type: string
        id:
          type: string
        idcsGuid:
          type: string
        lastName:
          type: string
        links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
        tenantId:
          type: string
        userName:
          type: string
      type: object
    UserPropertyDto:
      properties:
        active:
          type: boolean
        admin:
          type: boolean
        country:
          type: string
        id:
          type: string
        jobTitle:
          type: string
        language:
          type: string
        name:
          type: string
        phoneNo:
          additionalProperties:
            type: string
          type: object
        roles:
          items:
            type: string
          type: array
        timeZone:
          type: string
        userName:
          type: string
        workAddress:
          type: string
      type: object
    UserResource:
      properties:
        active:
          type: boolean
        addresses:
          items:
            $ref: '#/components/schemas/Address'
          type: array
        displayName:
          type: string
        emails:
          items:
            $ref: '#/components/schemas/Email'
          type: array
        entitlements:
          items:
            $ref: '#/components/schemas/Entitlement'
          type: array
        externalId:
          type: string
        groups:
          items:
            $ref: '#/components/schemas/Group'
          type: array
        id:
          type: string
        ims:
          items:
            $ref: '#/components/schemas/InstantMessagingAddress'
          type: array
        locale:
          type: string
        meta:
          $ref: '#/components/schemas/Meta'
        name:
          $ref: '#/components/schemas/Name'
        nickName:
          type: string
        password:
          type: string
        phoneNumbers:
          items:
            $ref: '#/components/schemas/PhoneNumber'
          type: array
        photos:
          items:
            $ref: '#/components/schemas/Photo'
          type: array
        preferredLanguage:
          type: string
        profileUrl:
          format: uri
          type: string
        roles:
          items:
            $ref: '#/components/schemas/Role'
          type: array
        schemas:
          items:
            type: string
          type: array
          uniqueItems: true
        timezone:
          type: string
        title:
          type: string
        userName:
          type: string
        userType:
          type: string
        x509Certificates:
          items:
            $ref: '#/components/schemas/X509Certificate'
          type: array
      type: object
    X509Certificate:
      properties:
        display:
          type: string
        primary:
          type: boolean
        type:
          type: string
        value:
          items:
            format: byte
            type: string
          type: array
      type: object
    AuditDto:
      properties:
        details:
          type: string
        entries:
          items:
            type: string
          type: array
        identifier:
          type: string
        message:
          type: string
        recordTimestamp:
          format: int64
          type: integer
        recordWorkflowTimestamp:
          format: int64
          type: integer
        runId:
          type: string
        severity:
          type: string
        tenantId:
          format: int64
          type: integer
        versionTs:
          format: int64
          type: integer
        workflowId:
          type: string
      type: object
    CollectionResourceNotification:
      properties:
        count:
          format: int32
          type: integer
        hasMore:
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/Notification'
          type: array
        limit:
          format: int32
          type: integer
        links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
        offset:
          format: int32
          type: integer
        totalResults:
          format: int32
          type: integer
      type: object
    CollectionResourceNotificationEvent:
      properties:
        count:
          format: int32
          type: integer
        hasMore:
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/NotificationEvent'
          type: array
        limit:
          format: int32
          type: integer
        links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
        offset:
          format: int32
          type: integer
        totalResults:
          format: int32
          type: integer
      type: object
    CollectionResourceNotificationType:
      properties:
        count:
          format: int32
          type: integer
        hasMore:
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/NotificationType'
          type: array
        limit:
          format: int32
          type: integer
        links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
        offset:
          format: int32
          type: integer
        totalResults:
          format: int32
          type: integer
      type: object
    CollectionResourceRecipient:
      properties:
        count:
          format: int32
          type: integer
        hasMore:
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/Recipient'
          type: array
        limit:
          format: int32
          type: integer
        links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
        offset:
          format: int32
          type: integer
        totalResults:
          format: int32
          type: integer
      type: object
    ErrorDto:
      properties:
        message:
          type: string
      type: object
    MetricDto:
      properties:
        metricName:
          type: string
        metricValue:
          format: int64
          type: integer
      type: object
    NotificationCreateDto:
      properties:
        description:
          type: string
        medium:
          enum:
            - EMAIL
            - SMS
          type: string
        name:
          type: string
        notificationType:
          type: string
        onlyOnFailure:
          type: boolean
        recipients:
          items:
            type: string
          type: array
      type: object
    NotificationEvent:
      properties:
        createdOn:
          format: date-time
          type: string
        headers:
          type: string
        id:
          type: string
        links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
        payload:
          type: string
      type: object
    NotificationEventDto:
      properties:
        durationMs:
          format: int64
          type: integer
        endTs:
          format: int64
          type: integer
        errors:
          items:
            $ref: '#/components/schemas/ErrorDto'
          type: array
        jobDescription:
          type: string
        jobId:
          type: string
        jobName:
          type: string
        jobType:
          type: string
        runData:
          $ref: '#/components/schemas/RunDataDto'
        runId:
          type: string
        startTs:
          format: int64
          type: integer
        startedBy:
          type: string
        status:
          type: string
      type: object
    NotificationType:
      properties:
        description:
          type: string
        links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
        name:
          type: string
      type: object
    Recipient:
      properties:
        contactDetails:
          type: string
        id:
          type: string
        isActive:
          type: boolean
        links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
      required:
        - contactDetails
      type: object
    RunDataDto:
      properties:
        auditEntries:
          items:
            $ref: '#/components/schemas/AuditDto'
          type: array
        metrics:
          items:
            $ref: '#/components/schemas/MetricDto'
          type: array
      type: object
    CollectionResourcePreference:
      properties:
        count:
          format: int32
          type: integer
        hasMore:
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/Preference'
          type: array
        limit:
          format: int32
          type: integer
        links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
        offset:
          format: int32
          type: integer
        totalResults:
          format: int32
          type: integer
      type: object
    Preference:
      properties:
        cxtenantId:
          type: string
        cxuserId:
          type: string
        id:
          type: string
        links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
        name:
          type: string
        value:
          type: string
      type: object
    ImMessage:
      properties:
        action:
          type: string
        code:
          type: string
        field:
          type: string
        hint:
          type: string
        severity:
          type: string
        source:
          type: string
        stackTrace:
          type: string
        text:
          type: string
      type: object
    ImRequestDto:
      properties:
        admin_email:
          type: string
        admin_first_name:
          type: string
        admin_last_name:
          type: string
        admin_password:
          type: string
        admin_uri:
          type: string
        admin_username:
          type: string
        app_id_credentials:
          $ref: '#/components/schemas/JsonNode'
        app_uri:
          type: string
        cloud_account_id:
          type: string
        cloud_account_name:
          type: string
        dependent_links:
          $ref: '#/components/schemas/JsonNode'
        entitlement_specific_payload:
          $ref: '#/components/schemas/JsonNode'
        id:
          type: string
        idcs_app_guid:
          type: string
        idcs_app_url:
          type: string
        idcs_self_update_url:
          type: string
        identity_service_instance_guid:
          type: string
        identity_service_instance_url:
          type: string
        name:
          type: string
        oauth_clients:
          $ref: '#/components/schemas/JsonNode'
        oauth_resource:
          $ref: '#/components/schemas/JsonNode'
        operation:
          type: string
        request_id:
          type: string
        service_specific_payload:
          $ref: '#/components/schemas/JsonNode'
        service_specific_uris:
          $ref: '#/components/schemas/JsonNode'
        service_type:
          type: string
        size:
          type: string
        status:
          type: string
        uri:
          type: string
      type: object
    ImStatusDto:
      properties:
        est_op_end_time:
          type: string
        messages:
          items:
            $ref: '#/components/schemas/ImMessage'
          type: array
        op:
          type: string
        op_start_time:
          type: string
        status:
          format: int32
          type: integer
        status_uri:
          type: string
        target_uri:
          type: string
      type: object